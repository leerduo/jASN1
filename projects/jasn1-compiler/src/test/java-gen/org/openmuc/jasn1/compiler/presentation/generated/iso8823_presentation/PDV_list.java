/**
 * This class file was automatically generated by jASN1 v1.5.0 (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.presentation.generated.iso8823_presentation;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PDV_list {

	public static class SubChoice_presentation_data_values {

		public byte[] code = null;
		public BerAnyNoDecode single_ASN1_type = null;

		public BerOctetString octet_aligned = null;

		public BerBitString arbitrary = null;

		public SubChoice_presentation_data_values() {
		}

		public SubChoice_presentation_data_values(byte[] code) {
			this.code = code;
		}

		public SubChoice_presentation_data_values(BerAnyNoDecode single_ASN1_type, BerOctetString octet_aligned, BerBitString arbitrary) {
			this.single_ASN1_type = single_ASN1_type;
			this.octet_aligned = octet_aligned;
			this.arbitrary = arbitrary;
		}

		public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {
			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				return code.length;

			}
			int codeLength = 0;
			int sublength;

			if (arbitrary != null) {
				codeLength += arbitrary.encode(os, false);
				// write tag {CONTEXT_CLASS, PRIMITIVE, 2}
				os.write(0x82);
				codeLength += 1;
				return codeLength;

			}
			
			if (octet_aligned != null) {
				codeLength += octet_aligned.encode(os, false);
				// write tag {CONTEXT_CLASS, PRIMITIVE, 1}
				os.write(0x81);
				codeLength += 1;
				return codeLength;

			}
			
			if (single_ASN1_type != null) {
				sublength = single_ASN1_type.encode(os, true);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(os, sublength);
				// write tag {CONTEXT_CLASS, CONSTRUCTED, 0}
				os.write(0xa0);
				codeLength += 1;
				return codeLength;

			}
			
			throw new IOException("Error encoding BerChoice: No item in choice was selected.");
		}

		public int decode(InputStream is, BerIdentifier berIdentifier) throws IOException {
			int codeLength = 0;
			BerIdentifier passedIdentifier = berIdentifier;

			if (berIdentifier == null) {
				berIdentifier = new BerIdentifier();
				codeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)) {
				single_ASN1_type = new BerAnyNoDecode();
				codeLength += single_ASN1_type.decode(is, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
				octet_aligned = new BerOctetString();
				codeLength += octet_aligned.decode(is, false);
				return codeLength;
			}

			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 2)) {
				arbitrary = new BerBitString();
				codeLength += arbitrary.decode(is, false);
				return codeLength;
			}

			if (passedIdentifier != null) {
				return 0;
			}
			throw new IOException("Error decoding BerChoice: Identifier matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			if ( single_ASN1_type!= null) {
				return "CHOICE{single_ASN1_type: " + single_ASN1_type + "}";
			}

			if ( octet_aligned!= null) {
				return "CHOICE{octet_aligned: " + octet_aligned + "}";
			}

			if ( arbitrary!= null) {
				return "CHOICE{arbitrary: " + arbitrary + "}";
			}

			return "unknown";
		}

	}

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public Transfer_syntax_name transfer_syntax_name = null;

	public Presentation_context_identifier presentation_context_identifier = null;

	public SubChoice_presentation_data_values presentation_data_values = null;

	public PDV_list() {
		id = identifier;
	}

	public PDV_list(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public PDV_list(Transfer_syntax_name transfer_syntax_name, Presentation_context_identifier presentation_context_identifier, SubChoice_presentation_data_values presentation_data_values) {
		id = identifier;
		this.transfer_syntax_name = transfer_syntax_name;
		this.presentation_context_identifier = presentation_context_identifier;
		this.presentation_data_values = presentation_data_values;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			codeLength += presentation_data_values.encode(os, true);
			
			codeLength += presentation_context_identifier.encode(os, true);
			
			if (transfer_syntax_name != null) {
				codeLength += transfer_syntax_name.encode(os, true);
			}
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		codeLength += length.val;

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(Transfer_syntax_name.identifier)) {
			transfer_syntax_name = new Transfer_syntax_name();
			subCodeLength += transfer_syntax_name.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(Presentation_context_identifier.identifier)) {
			presentation_context_identifier = new Presentation_context_identifier();
			subCodeLength += presentation_context_identifier.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		presentation_data_values = new SubChoice_presentation_data_values();
		subCodeLength += presentation_data_values.decode(is, berIdentifier);
		if (subCodeLength == length.val) {
			return codeLength;
		}
		throw new IOException("Unexpected end of sequence, length tag: " + length.val + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		boolean firstSelectedElement = true;
		if (transfer_syntax_name != null) {
			sb.append("transfer_syntax_name: ").append(transfer_syntax_name);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(", ");
		}
		sb.append("presentation_context_identifier: ").append(presentation_context_identifier);
		
		sb.append(", ");
		sb.append("presentation_data_values: ").append(presentation_data_values);
		
		sb.append("}");
		return sb.toString();
	}

}

