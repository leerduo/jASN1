/**
 * This class file was automatically generated by jASN1 v1.6.1-SNAPSHOT (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.rspdefinitions.generated.pkix1explicit88;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import org.openmuc.jasn1.compiler.rspdefinitions.generated.teletexdomaindefinedattributes.*;
import org.openmuc.jasn1.compiler.rspdefinitions.generated.rspdefinitions.*;
import org.openmuc.jasn1.compiler.rspdefinitions.generated.pkix1implicit88.*;

public class PostalCode {

	public byte[] code = null;
	public BerNumericString numericCode = null;

	public BerPrintableString printableCode = null;

	public PostalCode() {
	}

	public PostalCode(byte[] code) {
		this.code = code;
	}

	public PostalCode(BerNumericString numericCode, BerPrintableString printableCode) {
		this.numericCode = numericCode;
		this.printableCode = printableCode;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {
		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;

		}
		int codeLength = 0;
		if (printableCode != null) {
			codeLength += printableCode.encode(os, true);
			return codeLength;

		}
		
		if (numericCode != null) {
			codeLength += numericCode.encode(os, true);
			return codeLength;

		}
		
		throw new IOException("Error encoding BerChoice: No item in choice was selected.");
	}

	public int decode(InputStream is, BerIdentifier berIdentifier) throws IOException {
		int codeLength = 0;
		BerIdentifier passedIdentifier = berIdentifier;

		if (berIdentifier == null) {
			berIdentifier = new BerIdentifier();
			codeLength += berIdentifier.decode(is);
		}

		BerLength length = new BerLength();
		if (berIdentifier.equals(BerNumericString.identifier)) {
			numericCode = new BerNumericString();
			codeLength += numericCode.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(BerPrintableString.identifier)) {
			printableCode = new BerPrintableString();
			codeLength += printableCode.decode(is, false);
			return codeLength;
		}

		if (passedIdentifier != null) {
			return 0;
		}
		throw new IOException("Error decoding BerChoice: Identifier matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		if ( numericCode!= null) {
			return "CHOICE{numericCode: " + numericCode + "}";
		}

		if ( printableCode!= null) {
			return "CHOICE{printableCode: " + printableCode + "}";
		}

		return "unknown";
	}

}

