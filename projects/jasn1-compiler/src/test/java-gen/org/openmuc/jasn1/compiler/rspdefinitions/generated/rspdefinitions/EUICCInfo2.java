/**
 * This class file was automatically generated by jASN1 v1.6.1-SNAPSHOT (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.rspdefinitions.generated.rspdefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import org.openmuc.jasn1.compiler.rspdefinitions.generated.teletexdomaindefinedattributes.*;
import org.openmuc.jasn1.compiler.rspdefinitions.generated.pkix1implicit88.*;
import org.openmuc.jasn1.compiler.rspdefinitions.generated.pkix1explicit88.*;

public class EUICCInfo2 {

	public static class EuiccCiPKIdListForVerification {

		public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
		protected BerIdentifier id;

		public byte[] code = null;
		public List<SubjectKeyIdentifier> seqOf = null;

		public EuiccCiPKIdListForVerification() {
			id = identifier;
			seqOf = new ArrayList<SubjectKeyIdentifier>();
		}

		public EuiccCiPKIdListForVerification(byte[] code) {
			id = identifier;
			this.code = code;
		}

		public EuiccCiPKIdListForVerification(List<SubjectKeyIdentifier> seqOf) {
			id = identifier;
			this.seqOf = seqOf;
		}

		public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {
			int codeLength;

			if (code != null) {
				codeLength = code.length;
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
			}
			else {
				codeLength = 0;
				for (int i = (seqOf.size() - 1); i >= 0; i--) {
					codeLength += seqOf.get(i).encode(os, true);
				}

				codeLength += BerLength.encodeLength(os, codeLength);

			}

			if (explicit) {
				codeLength += id.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is, boolean explicit) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerIdentifier berIdentifier = new BerIdentifier();
			if (explicit) {
				codeLength += id.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				SubjectKeyIdentifier element = new SubjectKeyIdentifier();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("SEQUENCE OF{");

			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SubjectKeyIdentifier> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(", ").append(it.next());
					}
				}
			}

			sb.append("}");

			return sb.toString();
		}

	}

	public static class EuiccCiPKIdListForSigning {

		public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
		protected BerIdentifier id;

		public byte[] code = null;
		public List<SubjectKeyIdentifier> seqOf = null;

		public EuiccCiPKIdListForSigning() {
			id = identifier;
			seqOf = new ArrayList<SubjectKeyIdentifier>();
		}

		public EuiccCiPKIdListForSigning(byte[] code) {
			id = identifier;
			this.code = code;
		}

		public EuiccCiPKIdListForSigning(List<SubjectKeyIdentifier> seqOf) {
			id = identifier;
			this.seqOf = seqOf;
		}

		public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {
			int codeLength;

			if (code != null) {
				codeLength = code.length;
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
			}
			else {
				codeLength = 0;
				for (int i = (seqOf.size() - 1); i >= 0; i--) {
					codeLength += seqOf.get(i).encode(os, true);
				}

				codeLength += BerLength.encodeLength(os, codeLength);

			}

			if (explicit) {
				codeLength += id.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is, boolean explicit) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerIdentifier berIdentifier = new BerIdentifier();
			if (explicit) {
				codeLength += id.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				SubjectKeyIdentifier element = new SubjectKeyIdentifier();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("SEQUENCE OF{");

			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SubjectKeyIdentifier> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(", ").append(it.next());
					}
				}
			}

			sb.append("}");

			return sb.toString();
		}

	}

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 34);
	protected BerIdentifier id;

	public byte[] code = null;
	public VersionType profileVersion = null;

	public VersionType svn = null;

	public VersionType euiccFirmwareVer = null;

	public BerOctetString extCardResource = null;

	public UICCCapability uiccCapability = null;

	public VersionType javacardVersion = null;

	public VersionType globalplatformVersion = null;

	public RspCapability rspCapability = null;

	public EuiccCiPKIdListForVerification euiccCiPKIdListForVerification = null;

	public EuiccCiPKIdListForSigning euiccCiPKIdListForSigning = null;

	public BerInteger euiccCategory = null;

	public PprIds forbiddenProfilePolicyRules = null;

	public VersionType ppVersion = null;

	public BerUTF8String sasAcreditationNumber = null;

	public CertificationDataObject certificationDataObject = null;

	public EUICCInfo2() {
		id = identifier;
	}

	public EUICCInfo2(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public EUICCInfo2(VersionType profileVersion, VersionType svn, VersionType euiccFirmwareVer, BerOctetString extCardResource, UICCCapability uiccCapability, VersionType javacardVersion, VersionType globalplatformVersion, RspCapability rspCapability, EuiccCiPKIdListForVerification euiccCiPKIdListForVerification, EuiccCiPKIdListForSigning euiccCiPKIdListForSigning, BerInteger euiccCategory, PprIds forbiddenProfilePolicyRules, VersionType ppVersion, BerUTF8String sasAcreditationNumber, CertificationDataObject certificationDataObject) {
		id = identifier;
		this.profileVersion = profileVersion;
		this.svn = svn;
		this.euiccFirmwareVer = euiccFirmwareVer;
		this.extCardResource = extCardResource;
		this.uiccCapability = uiccCapability;
		this.javacardVersion = javacardVersion;
		this.globalplatformVersion = globalplatformVersion;
		this.rspCapability = rspCapability;
		this.euiccCiPKIdListForVerification = euiccCiPKIdListForVerification;
		this.euiccCiPKIdListForSigning = euiccCiPKIdListForSigning;
		this.euiccCategory = euiccCategory;
		this.forbiddenProfilePolicyRules = forbiddenProfilePolicyRules;
		this.ppVersion = ppVersion;
		this.sasAcreditationNumber = sasAcreditationNumber;
		this.certificationDataObject = certificationDataObject;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (certificationDataObject != null) {
				codeLength += certificationDataObject.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
				os.write(0xac);
				codeLength += 1;
			}
			
			codeLength += sasAcreditationNumber.encode(os, true);
			
			codeLength += ppVersion.encode(os, true);
			
			if (forbiddenProfilePolicyRules != null) {
				codeLength += forbiddenProfilePolicyRules.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 25
				os.write(0x99);
				codeLength += 1;
			}
			
			if (euiccCategory != null) {
				codeLength += euiccCategory.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 11
				os.write(0x8b);
				codeLength += 1;
			}
			
			codeLength += euiccCiPKIdListForSigning.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			os.write(0xaa);
			codeLength += 1;
			
			codeLength += euiccCiPKIdListForVerification.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			os.write(0xa9);
			codeLength += 1;
			
			codeLength += rspCapability.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			os.write(0x88);
			codeLength += 1;
			
			if (globalplatformVersion != null) {
				codeLength += globalplatformVersion.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 7
				os.write(0x87);
				codeLength += 1;
			}
			
			if (javacardVersion != null) {
				codeLength += javacardVersion.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 6
				os.write(0x86);
				codeLength += 1;
			}
			
			codeLength += uiccCapability.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			os.write(0x85);
			codeLength += 1;
			
			codeLength += extCardResource.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
			
			codeLength += euiccFirmwareVer.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			os.write(0x83);
			codeLength += 1;
			
			codeLength += svn.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
			
			codeLength += profileVersion.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
			profileVersion = new VersionType();
			subCodeLength += profileVersion.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 2)) {
			svn = new VersionType();
			subCodeLength += svn.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 3)) {
			euiccFirmwareVer = new VersionType();
			subCodeLength += euiccFirmwareVer.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 4)) {
			extCardResource = new BerOctetString();
			subCodeLength += extCardResource.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 5)) {
			uiccCapability = new UICCCapability();
			subCodeLength += uiccCapability.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 6)) {
			javacardVersion = new VersionType();
			subCodeLength += javacardVersion.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 7)) {
			globalplatformVersion = new VersionType();
			subCodeLength += globalplatformVersion.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 8)) {
			rspCapability = new RspCapability();
			subCodeLength += rspCapability.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 9)) {
			euiccCiPKIdListForVerification = new EuiccCiPKIdListForVerification();
			subCodeLength += euiccCiPKIdListForVerification.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 10)) {
			euiccCiPKIdListForSigning = new EuiccCiPKIdListForSigning();
			subCodeLength += euiccCiPKIdListForSigning.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 11)) {
			euiccCategory = new BerInteger();
			subCodeLength += euiccCategory.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 25)) {
			forbiddenProfilePolicyRules = new PprIds();
			subCodeLength += forbiddenProfilePolicyRules.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(VersionType.identifier)) {
			ppVersion = new VersionType();
			subCodeLength += ppVersion.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerUTF8String.identifier)) {
			sasAcreditationNumber = new BerUTF8String();
			subCodeLength += sasAcreditationNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 12)) {
			certificationDataObject = new CertificationDataObject();
			subCodeLength += certificationDataObject.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("profileVersion: ").append(profileVersion);
		
		sb.append(", ");
		sb.append("svn: ").append(svn);
		
		sb.append(", ");
		sb.append("euiccFirmwareVer: ").append(euiccFirmwareVer);
		
		sb.append(", ");
		sb.append("extCardResource: ").append(extCardResource);
		
		sb.append(", ");
		sb.append("uiccCapability: ").append(uiccCapability);
		
		if (javacardVersion != null) {
			sb.append(", ");
			sb.append("javacardVersion: ").append(javacardVersion);
		}
		
		if (globalplatformVersion != null) {
			sb.append(", ");
			sb.append("globalplatformVersion: ").append(globalplatformVersion);
		}
		
		sb.append(", ");
		sb.append("rspCapability: ").append(rspCapability);
		
		sb.append(", ");
		sb.append("euiccCiPKIdListForVerification: ").append(euiccCiPKIdListForVerification);
		
		sb.append(", ");
		sb.append("euiccCiPKIdListForSigning: ").append(euiccCiPKIdListForSigning);
		
		if (euiccCategory != null) {
			sb.append(", ");
			sb.append("euiccCategory: ").append(euiccCategory);
		}
		
		if (forbiddenProfilePolicyRules != null) {
			sb.append(", ");
			sb.append("forbiddenProfilePolicyRules: ").append(forbiddenProfilePolicyRules);
		}
		
		sb.append(", ");
		sb.append("ppVersion: ").append(ppVersion);
		
		sb.append(", ");
		sb.append("sasAcreditationNumber: ").append(sasAcreditationNumber);
		
		if (certificationDataObject != null) {
			sb.append(", ");
			sb.append("certificationDataObject: ").append(certificationDataObject);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

