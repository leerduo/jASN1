/**
 * This class file was automatically generated by jASN1 v1.5.1-SNAPSHOT (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.rspdefinitions.generated.pkix1explicit88;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import org.openmuc.jasn1.compiler.rspdefinitions.generated.rspdefinitions.*;
import org.openmuc.jasn1.compiler.rspdefinitions.generated.pkix1implicit88.*;

public class TBSCertList {

	public static class RevokedCertificates {

		public static class SEQUENCE {

			public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
			protected BerIdentifier id;

			public byte[] code = null;
			public CertificateSerialNumber userCertificate = null;

			public Time revocationDate = null;

			public Extensions crlEntryExtensions = null;

			public SEQUENCE() {
				id = identifier;
			}

			public SEQUENCE(byte[] code) {
				id = identifier;
				this.code = code;
			}

			public SEQUENCE(CertificateSerialNumber userCertificate, Time revocationDate, Extensions crlEntryExtensions) {
				id = identifier;
				this.userCertificate = userCertificate;
				this.revocationDate = revocationDate;
				this.crlEntryExtensions = crlEntryExtensions;
			}

			public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

				int codeLength;

				if (code != null) {
					codeLength = code.length;
					for (int i = code.length - 1; i >= 0; i--) {
						os.write(code[i]);
					}
				}
				else {
					codeLength = 0;
					int sublength;

					if (crlEntryExtensions != null) {
						codeLength += crlEntryExtensions.encode(os, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
						os.write(0xa2);
						codeLength += 1;
					}
					
					sublength = revocationDate.encode(os, true);
					codeLength += sublength;
					codeLength += BerLength.encodeLength(os, sublength);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
					os.write(0xa1);
					codeLength += 1;
					
					codeLength += userCertificate.encode(os, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 0
					os.write(0x80);
					codeLength += 1;
					
					codeLength += BerLength.encodeLength(os, codeLength);
				}

				if (explicit) {
					codeLength += id.encode(os);
				}

				return codeLength;

			}

			public int decode(InputStream is, boolean explicit) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerIdentifier berIdentifier = new BerIdentifier();

				if (explicit) {
					codeLength += id.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				if (totalLength == -1) {
					subCodeLength += berIdentifier.decode(is);

					if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}
					if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
						userCertificate = new CertificateSerialNumber();
						subCodeLength += userCertificate.decode(is, false);
						subCodeLength += berIdentifier.decode(is);
					}
					if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}
					if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 1)) {
						subCodeLength += length.decode(is);
						revocationDate = new Time();
						int choiceDecodeLength = revocationDate.decode(is, null);
						if (choiceDecodeLength != 0) {
							subCodeLength += choiceDecodeLength;
							subCodeLength += berIdentifier.decode(is);
						}
						else {
							revocationDate = null;
						}

					}
					if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}
					if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)) {
						crlEntryExtensions = new Extensions();
						subCodeLength += crlEntryExtensions.decode(is, false);
						subCodeLength += berIdentifier.decode(is);
					}
					int nextByte = is.read();
					if (berIdentifier.tagNumber != 0 || berIdentifier.identifierClass != 0 || berIdentifier.primitive != 0
					|| nextByte != 0) {
						if (nextByte == -1) {
							throw new EOFException("Unexpected end of input stream.");
						}
						throw new IOException("Decoded sequence has wrong end of contents octets");
					}
					codeLength += subCodeLength + 1;
					return codeLength;
				}

				subCodeLength += berIdentifier.decode(is);
				if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
					userCertificate = new CertificateSerialNumber();
					subCodeLength += userCertificate.decode(is, false);
					subCodeLength += berIdentifier.decode(is);
				}
				else {
					throw new IOException("Identifier does not match the mandatory sequence element identifer.");
				}
				
				if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 1)) {
					subCodeLength += length.decode(is);
					revocationDate = new Time();
					subCodeLength += revocationDate.decode(is, null);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
					subCodeLength += berIdentifier.decode(is);
				}
				else {
					throw new IOException("Identifier does not match required sequence element identifer.");
				}
				
				if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)) {
					crlEntryExtensions = new Extensions();
					subCodeLength += crlEntryExtensions.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
				encode(os, false);
				code = os.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder("SEQUENCE{");
				sb.append("userCertificate: ").append(userCertificate);
				
				sb.append(", ");
				sb.append("revocationDate: ").append(revocationDate);
				
				if (crlEntryExtensions != null) {
					sb.append(", ");
					sb.append("crlEntryExtensions: ").append(crlEntryExtensions);
				}
				
				sb.append("}");
				return sb.toString();
			}

		}

		public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
		protected BerIdentifier id;

		public byte[] code = null;
		public List<SEQUENCE> seqOf = null;

		public RevokedCertificates() {
			id = identifier;
			seqOf = new ArrayList<SEQUENCE>();
		}

		public RevokedCertificates(byte[] code) {
			id = identifier;
			this.code = code;
		}

		public RevokedCertificates(List<SEQUENCE> seqOf) {
			id = identifier;
			this.seqOf = seqOf;
		}

		public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {
			int codeLength;

			if (code != null) {
				codeLength = code.length;
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
			}
			else {
				codeLength = 0;
				for (int i = (seqOf.size() - 1); i >= 0; i--) {
					codeLength += seqOf.get(i).encode(os, true);
				}

				codeLength += BerLength.encodeLength(os, codeLength);

			}

			if (explicit) {
				codeLength += id.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is, boolean explicit) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerIdentifier berIdentifier = new BerIdentifier();
			if (explicit) {
				codeLength += id.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			if (length.val == -1) {
				while (true) {
					subCodeLength += berIdentifier.decode(is);

					if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}

					SEQUENCE element = new SEQUENCE();
					subCodeLength += element.decode(is, false);
					seqOf.add(element);
				}
			}
			while (subCodeLength < totalLength) {
				SEQUENCE element = new SEQUENCE();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("SEQUENCE OF{");

			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SEQUENCE> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(", ").append(it.next());
					}
				}
			}

			sb.append("}");

			return sb.toString();
		}

	}

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public Version version = null;

	public AlgorithmIdentifier signature = null;

	public Name issuer = null;

	public Time thisUpdate = null;

	public Time nextUpdate = null;

	public RevokedCertificates revokedCertificates = null;

	public Extensions crlExtensions = null;

	public TBSCertList() {
		id = identifier;
	}

	public TBSCertList(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public TBSCertList(Version version, AlgorithmIdentifier signature, Name issuer, Time thisUpdate, Time nextUpdate, RevokedCertificates revokedCertificates, Extensions crlExtensions) {
		id = identifier;
		this.version = version;
		this.signature = signature;
		this.issuer = issuer;
		this.thisUpdate = thisUpdate;
		this.nextUpdate = nextUpdate;
		this.revokedCertificates = revokedCertificates;
		this.crlExtensions = crlExtensions;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (crlExtensions != null) {
				codeLength += crlExtensions.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				os.write(0xa0);
				codeLength += 1;
			}
			
			if (revokedCertificates != null) {
				codeLength += revokedCertificates.encode(os, true);
			}
			
			if (nextUpdate != null) {
				codeLength += nextUpdate.encode(os, true);
			}
			
			codeLength += thisUpdate.encode(os, true);
			
			codeLength += issuer.encode(os, true);
			
			codeLength += signature.encode(os, true);
			
			if (version != null) {
				codeLength += version.encode(os, true);
			}
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == -1) {
			subCodeLength += berIdentifier.decode(is);

			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(Version.identifier)) {
				version = new Version();
				subCodeLength += version.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(AlgorithmIdentifier.identifier)) {
				signature = new AlgorithmIdentifier();
				subCodeLength += signature.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			issuer = new Name();
			int choiceDecodeLength = issuer.decode(is, berIdentifier);
			if (choiceDecodeLength != 0) {
				subCodeLength += choiceDecodeLength;
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				issuer = null;
			}

			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			thisUpdate = new Time();
			choiceDecodeLength = thisUpdate.decode(is, berIdentifier);
			if (choiceDecodeLength != 0) {
				subCodeLength += choiceDecodeLength;
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				thisUpdate = null;
			}

			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			nextUpdate = new Time();
			choiceDecodeLength = nextUpdate.decode(is, berIdentifier);
			if (choiceDecodeLength != 0) {
				subCodeLength += choiceDecodeLength;
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				nextUpdate = null;
			}

			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(RevokedCertificates.identifier)) {
				revokedCertificates = new RevokedCertificates();
				subCodeLength += revokedCertificates.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)) {
				crlExtensions = new Extensions();
				subCodeLength += crlExtensions.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			int nextByte = is.read();
			if (berIdentifier.tagNumber != 0 || berIdentifier.identifierClass != 0 || berIdentifier.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(Version.identifier)) {
			version = new Version();
			subCodeLength += version.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(AlgorithmIdentifier.identifier)) {
			signature = new AlgorithmIdentifier();
			subCodeLength += signature.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		issuer = new Name();
		subCodeLength += issuer.decode(is, berIdentifier);
		subCodeLength += berIdentifier.decode(is);
		
		thisUpdate = new Time();
		subCodeLength += thisUpdate.decode(is, berIdentifier);
		if (subCodeLength == totalLength) {
			return codeLength;
		}
		subCodeLength += berIdentifier.decode(is);
		
		nextUpdate = new Time();
		int choiceDecodeLength = nextUpdate.decode(is, berIdentifier);
		if (choiceDecodeLength != 0) {
			subCodeLength += choiceDecodeLength;
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			nextUpdate = null;
		}
		
		if (berIdentifier.equals(RevokedCertificates.identifier)) {
			revokedCertificates = new RevokedCertificates();
			subCodeLength += revokedCertificates.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0)) {
			crlExtensions = new Extensions();
			subCodeLength += crlExtensions.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		boolean firstSelectedElement = true;
		if (version != null) {
			sb.append("version: ").append(version);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(", ");
		}
		sb.append("signature: ").append(signature);
		
		sb.append(", ");
		sb.append("issuer: ").append(issuer);
		
		sb.append(", ");
		sb.append("thisUpdate: ").append(thisUpdate);
		
		if (nextUpdate != null) {
			sb.append(", ");
			sb.append("nextUpdate: ").append(nextUpdate);
		}
		
		if (revokedCertificates != null) {
			sb.append(", ");
			sb.append("revokedCertificates: ").append(revokedCertificates);
		}
		
		if (crlExtensions != null) {
			sb.append(", ");
			sb.append("crlExtensions: ").append(crlExtensions);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

