/**
 * This class file was automatically generated by jASN1 v1.6.1-SNAPSHOT (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.rspdefinitions.generated.rspdefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import org.openmuc.jasn1.compiler.rspdefinitions.generated.teletexdomaindefinedattributes.*;
import org.openmuc.jasn1.compiler.rspdefinitions.generated.pkix1implicit88.*;
import org.openmuc.jasn1.compiler.rspdefinitions.generated.pkix1explicit88.*;

public class AuthenticateResponseOk {

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public EuiccSigned1 euiccSigned1 = null;

	public BerOctetString euiccSignature1 = null;

	public Certificate euiccCertificate = null;

	public Certificate eumCertificate = null;

	public AuthenticateResponseOk() {
		id = identifier;
	}

	public AuthenticateResponseOk(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public AuthenticateResponseOk(EuiccSigned1 euiccSigned1, BerOctetString euiccSignature1, Certificate euiccCertificate, Certificate eumCertificate) {
		id = identifier;
		this.euiccSigned1 = euiccSigned1;
		this.euiccSignature1 = euiccSignature1;
		this.euiccCertificate = euiccCertificate;
		this.eumCertificate = eumCertificate;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			codeLength += eumCertificate.encode(os, true);
			
			codeLength += euiccCertificate.encode(os, true);
			
			codeLength += euiccSignature1.encode(os, false);
			// write tag: APPLICATION_CLASS, PRIMITIVE, 55
			os.write(0x37);
			os.write(0x5f);
			codeLength += 2;
			
			codeLength += euiccSigned1.encode(os, true);
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(EuiccSigned1.identifier)) {
			euiccSigned1 = new EuiccSigned1();
			subCodeLength += euiccSigned1.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.PRIMITIVE, 55)) {
			euiccSignature1 = new BerOctetString();
			subCodeLength += euiccSignature1.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(Certificate.identifier)) {
			euiccCertificate = new Certificate();
			subCodeLength += euiccCertificate.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(Certificate.identifier)) {
			eumCertificate = new Certificate();
			subCodeLength += eumCertificate.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("euiccSigned1: ").append(euiccSigned1);
		
		sb.append(", ");
		sb.append("euiccSignature1: ").append(euiccSignature1);
		
		sb.append(", ");
		sb.append("euiccCertificate: ").append(euiccCertificate);
		
		sb.append(", ");
		sb.append("eumCertificate: ").append(eumCertificate);
		
		sb.append("}");
		return sb.toString();
	}

}

