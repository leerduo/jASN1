/**
 * This class file was automatically generated by jASN1 v1.5.0 (http://www.openmuc.org)
 */

package com.simless.mnohub.compiler.simalliance.generated.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PE_OPT_CSIM {

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public PEHeader optcsim_header = null;

	public BerObjectIdentifier templateID = null;

	public File ef_ssci = null;

	public File ef_fdn = null;

	public File ef_sms = null;

	public File ef_smsp = null;

	public File ef_smss = null;

	public File ef_ssfc = null;

	public File ef_spn = null;

	public File ef_mdn = null;

	public File ef_ecc = null;

	public File ef_me3gpdopc = null;

	public File ef_3gpdopm = null;

	public File ef_sipcap = null;

	public File ef_mipcap = null;

	public File ef_sipupp = null;

	public File ef_mipupp = null;

	public File ef_sipsp = null;

	public File ef_mipsp = null;

	public File ef_sippapss = null;

	public File ef_puzl = null;

	public File ef_maxpuzl = null;

	public File ef_hrpdcap = null;

	public File ef_hrpdupp = null;

	public File ef_csspr = null;

	public File ef_atc = null;

	public File ef_eprl = null;

	public File ef_bcsmscfg = null;

	public File ef_bcsmspref = null;

	public File ef_bcsmstable = null;

	public File ef_bcsmsp = null;

	public File ef_bakpara = null;

	public File ef_upbakpara = null;

	public File ef_mmsn = null;

	public File ef_ext8 = null;

	public File ef_mmsicp = null;

	public File ef_mmsup = null;

	public File ef_mmsucp = null;

	public File ef_auth_capability = null;

	public File ef_3gcik = null;

	public File ef_dck = null;

	public File ef_gid1 = null;

	public File ef_gid2 = null;

	public File ef_cdmacnl = null;

	public File ef_sf_euimid = null;

	public File ef_est = null;

	public File ef_hidden_key = null;

	public File ef_lcsver = null;

	public File ef_lcscp = null;

	public File ef_sdn = null;

	public File ef_ext2 = null;

	public File ef_ext3 = null;

	public File ef_ici = null;

	public File ef_oci = null;

	public File ef_ext5 = null;

	public File ef_ccp2 = null;

	public File ef_applabels = null;

	public File ef_model = null;

	public File ef_rc = null;

	public File ef_smscap = null;

	public File ef_mipflags = null;

	public File ef_3gpduppext = null;

	public File ef_ipv6cap = null;

	public File ef_tcpconfig = null;

	public File ef_dgc = null;

	public File ef_wapbrowsercp = null;

	public File ef_wapbrowserbm = null;

	public File ef_mmsconfig = null;

	public File ef_jdl = null;

	public PE_OPT_CSIM() {
		id = identifier;
	}

	public PE_OPT_CSIM(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public PE_OPT_CSIM(PEHeader optcsim_header, BerObjectIdentifier templateID, File ef_ssci, File ef_fdn, File ef_sms, File ef_smsp, File ef_smss, File ef_ssfc, File ef_spn, File ef_mdn, File ef_ecc, File ef_me3gpdopc, File ef_3gpdopm, File ef_sipcap, File ef_mipcap, File ef_sipupp, File ef_mipupp, File ef_sipsp, File ef_mipsp, File ef_sippapss, File ef_puzl, File ef_maxpuzl, File ef_hrpdcap, File ef_hrpdupp, File ef_csspr, File ef_atc, File ef_eprl, File ef_bcsmscfg, File ef_bcsmspref, File ef_bcsmstable, File ef_bcsmsp, File ef_bakpara, File ef_upbakpara, File ef_mmsn, File ef_ext8, File ef_mmsicp, File ef_mmsup, File ef_mmsucp, File ef_auth_capability, File ef_3gcik, File ef_dck, File ef_gid1, File ef_gid2, File ef_cdmacnl, File ef_sf_euimid, File ef_est, File ef_hidden_key, File ef_lcsver, File ef_lcscp, File ef_sdn, File ef_ext2, File ef_ext3, File ef_ici, File ef_oci, File ef_ext5, File ef_ccp2, File ef_applabels, File ef_model, File ef_rc, File ef_smscap, File ef_mipflags, File ef_3gpduppext, File ef_ipv6cap, File ef_tcpconfig, File ef_dgc, File ef_wapbrowsercp, File ef_wapbrowserbm, File ef_mmsconfig, File ef_jdl) {
		id = identifier;
		this.optcsim_header = optcsim_header;
		this.templateID = templateID;
		this.ef_ssci = ef_ssci;
		this.ef_fdn = ef_fdn;
		this.ef_sms = ef_sms;
		this.ef_smsp = ef_smsp;
		this.ef_smss = ef_smss;
		this.ef_ssfc = ef_ssfc;
		this.ef_spn = ef_spn;
		this.ef_mdn = ef_mdn;
		this.ef_ecc = ef_ecc;
		this.ef_me3gpdopc = ef_me3gpdopc;
		this.ef_3gpdopm = ef_3gpdopm;
		this.ef_sipcap = ef_sipcap;
		this.ef_mipcap = ef_mipcap;
		this.ef_sipupp = ef_sipupp;
		this.ef_mipupp = ef_mipupp;
		this.ef_sipsp = ef_sipsp;
		this.ef_mipsp = ef_mipsp;
		this.ef_sippapss = ef_sippapss;
		this.ef_puzl = ef_puzl;
		this.ef_maxpuzl = ef_maxpuzl;
		this.ef_hrpdcap = ef_hrpdcap;
		this.ef_hrpdupp = ef_hrpdupp;
		this.ef_csspr = ef_csspr;
		this.ef_atc = ef_atc;
		this.ef_eprl = ef_eprl;
		this.ef_bcsmscfg = ef_bcsmscfg;
		this.ef_bcsmspref = ef_bcsmspref;
		this.ef_bcsmstable = ef_bcsmstable;
		this.ef_bcsmsp = ef_bcsmsp;
		this.ef_bakpara = ef_bakpara;
		this.ef_upbakpara = ef_upbakpara;
		this.ef_mmsn = ef_mmsn;
		this.ef_ext8 = ef_ext8;
		this.ef_mmsicp = ef_mmsicp;
		this.ef_mmsup = ef_mmsup;
		this.ef_mmsucp = ef_mmsucp;
		this.ef_auth_capability = ef_auth_capability;
		this.ef_3gcik = ef_3gcik;
		this.ef_dck = ef_dck;
		this.ef_gid1 = ef_gid1;
		this.ef_gid2 = ef_gid2;
		this.ef_cdmacnl = ef_cdmacnl;
		this.ef_sf_euimid = ef_sf_euimid;
		this.ef_est = ef_est;
		this.ef_hidden_key = ef_hidden_key;
		this.ef_lcsver = ef_lcsver;
		this.ef_lcscp = ef_lcscp;
		this.ef_sdn = ef_sdn;
		this.ef_ext2 = ef_ext2;
		this.ef_ext3 = ef_ext3;
		this.ef_ici = ef_ici;
		this.ef_oci = ef_oci;
		this.ef_ext5 = ef_ext5;
		this.ef_ccp2 = ef_ccp2;
		this.ef_applabels = ef_applabels;
		this.ef_model = ef_model;
		this.ef_rc = ef_rc;
		this.ef_smscap = ef_smscap;
		this.ef_mipflags = ef_mipflags;
		this.ef_3gpduppext = ef_3gpduppext;
		this.ef_ipv6cap = ef_ipv6cap;
		this.ef_tcpconfig = ef_tcpconfig;
		this.ef_dgc = ef_dgc;
		this.ef_wapbrowsercp = ef_wapbrowsercp;
		this.ef_wapbrowserbm = ef_wapbrowserbm;
		this.ef_mmsconfig = ef_mmsconfig;
		this.ef_jdl = ef_jdl;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (ef_jdl != null) {
				codeLength += ef_jdl.encode(os, true);
			}
			
			if (ef_mmsconfig != null) {
				codeLength += ef_mmsconfig.encode(os, true);
			}
			
			if (ef_wapbrowserbm != null) {
				codeLength += ef_wapbrowserbm.encode(os, true);
			}
			
			if (ef_wapbrowsercp != null) {
				codeLength += ef_wapbrowsercp.encode(os, true);
			}
			
			if (ef_dgc != null) {
				codeLength += ef_dgc.encode(os, true);
			}
			
			if (ef_tcpconfig != null) {
				codeLength += ef_tcpconfig.encode(os, true);
			}
			
			if (ef_ipv6cap != null) {
				codeLength += ef_ipv6cap.encode(os, true);
			}
			
			if (ef_3gpduppext != null) {
				codeLength += ef_3gpduppext.encode(os, true);
			}
			
			if (ef_mipflags != null) {
				codeLength += ef_mipflags.encode(os, true);
			}
			
			if (ef_smscap != null) {
				codeLength += ef_smscap.encode(os, true);
			}
			
			if (ef_rc != null) {
				codeLength += ef_rc.encode(os, true);
			}
			
			if (ef_model != null) {
				codeLength += ef_model.encode(os, true);
			}
			
			if (ef_applabels != null) {
				codeLength += ef_applabels.encode(os, true);
			}
			
			if (ef_ccp2 != null) {
				codeLength += ef_ccp2.encode(os, true);
			}
			
			if (ef_ext5 != null) {
				codeLength += ef_ext5.encode(os, true);
			}
			
			if (ef_oci != null) {
				codeLength += ef_oci.encode(os, true);
			}
			
			if (ef_ici != null) {
				codeLength += ef_ici.encode(os, true);
			}
			
			if (ef_ext3 != null) {
				codeLength += ef_ext3.encode(os, true);
			}
			
			if (ef_ext2 != null) {
				codeLength += ef_ext2.encode(os, true);
			}
			
			if (ef_sdn != null) {
				codeLength += ef_sdn.encode(os, true);
			}
			
			if (ef_lcscp != null) {
				codeLength += ef_lcscp.encode(os, true);
			}
			
			if (ef_lcsver != null) {
				codeLength += ef_lcsver.encode(os, true);
			}
			
			if (ef_hidden_key != null) {
				codeLength += ef_hidden_key.encode(os, true);
			}
			
			if (ef_est != null) {
				codeLength += ef_est.encode(os, true);
			}
			
			if (ef_sf_euimid != null) {
				codeLength += ef_sf_euimid.encode(os, true);
			}
			
			if (ef_cdmacnl != null) {
				codeLength += ef_cdmacnl.encode(os, true);
			}
			
			if (ef_gid2 != null) {
				codeLength += ef_gid2.encode(os, true);
			}
			
			if (ef_gid1 != null) {
				codeLength += ef_gid1.encode(os, true);
			}
			
			if (ef_dck != null) {
				codeLength += ef_dck.encode(os, true);
			}
			
			if (ef_3gcik != null) {
				codeLength += ef_3gcik.encode(os, true);
			}
			
			if (ef_auth_capability != null) {
				codeLength += ef_auth_capability.encode(os, true);
			}
			
			if (ef_mmsucp != null) {
				codeLength += ef_mmsucp.encode(os, true);
			}
			
			if (ef_mmsup != null) {
				codeLength += ef_mmsup.encode(os, true);
			}
			
			if (ef_mmsicp != null) {
				codeLength += ef_mmsicp.encode(os, true);
			}
			
			if (ef_ext8 != null) {
				codeLength += ef_ext8.encode(os, true);
			}
			
			if (ef_mmsn != null) {
				codeLength += ef_mmsn.encode(os, true);
			}
			
			if (ef_upbakpara != null) {
				codeLength += ef_upbakpara.encode(os, true);
			}
			
			if (ef_bakpara != null) {
				codeLength += ef_bakpara.encode(os, true);
			}
			
			if (ef_bcsmsp != null) {
				codeLength += ef_bcsmsp.encode(os, true);
			}
			
			if (ef_bcsmstable != null) {
				codeLength += ef_bcsmstable.encode(os, true);
			}
			
			if (ef_bcsmspref != null) {
				codeLength += ef_bcsmspref.encode(os, true);
			}
			
			if (ef_bcsmscfg != null) {
				codeLength += ef_bcsmscfg.encode(os, true);
			}
			
			if (ef_eprl != null) {
				codeLength += ef_eprl.encode(os, true);
			}
			
			if (ef_atc != null) {
				codeLength += ef_atc.encode(os, true);
			}
			
			if (ef_csspr != null) {
				codeLength += ef_csspr.encode(os, true);
			}
			
			if (ef_hrpdupp != null) {
				codeLength += ef_hrpdupp.encode(os, true);
			}
			
			if (ef_hrpdcap != null) {
				codeLength += ef_hrpdcap.encode(os, true);
			}
			
			if (ef_maxpuzl != null) {
				codeLength += ef_maxpuzl.encode(os, true);
			}
			
			if (ef_puzl != null) {
				codeLength += ef_puzl.encode(os, true);
			}
			
			if (ef_sippapss != null) {
				codeLength += ef_sippapss.encode(os, true);
			}
			
			if (ef_mipsp != null) {
				codeLength += ef_mipsp.encode(os, true);
			}
			
			if (ef_sipsp != null) {
				codeLength += ef_sipsp.encode(os, true);
			}
			
			if (ef_mipupp != null) {
				codeLength += ef_mipupp.encode(os, true);
			}
			
			if (ef_sipupp != null) {
				codeLength += ef_sipupp.encode(os, true);
			}
			
			if (ef_mipcap != null) {
				codeLength += ef_mipcap.encode(os, true);
			}
			
			if (ef_sipcap != null) {
				codeLength += ef_sipcap.encode(os, true);
			}
			
			if (ef_3gpdopm != null) {
				codeLength += ef_3gpdopm.encode(os, true);
			}
			
			if (ef_me3gpdopc != null) {
				codeLength += ef_me3gpdopc.encode(os, true);
			}
			
			if (ef_ecc != null) {
				codeLength += ef_ecc.encode(os, true);
			}
			
			if (ef_mdn != null) {
				codeLength += ef_mdn.encode(os, true);
			}
			
			if (ef_spn != null) {
				codeLength += ef_spn.encode(os, true);
			}
			
			if (ef_ssfc != null) {
				codeLength += ef_ssfc.encode(os, true);
			}
			
			if (ef_smss != null) {
				codeLength += ef_smss.encode(os, true);
			}
			
			if (ef_smsp != null) {
				codeLength += ef_smsp.encode(os, true);
			}
			
			if (ef_sms != null) {
				codeLength += ef_sms.encode(os, true);
			}
			
			if (ef_fdn != null) {
				codeLength += ef_fdn.encode(os, true);
			}
			
			if (ef_ssci != null) {
				codeLength += ef_ssci.encode(os, true);
			}
			
			codeLength += templateID.encode(os, true);
			
			codeLength += optcsim_header.encode(os, true);
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		codeLength += length.val;

		if (length.val == -1) {
			subCodeLength += berIdentifier.decode(is);

			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(PEHeader.identifier)) {
				optcsim_header = new PEHeader();
				subCodeLength += optcsim_header.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerObjectIdentifier.identifier)) {
				templateID = new BerObjectIdentifier();
				subCodeLength += templateID.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ssci = new File();
				subCodeLength += ef_ssci.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_fdn = new File();
				subCodeLength += ef_fdn.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_sms = new File();
				subCodeLength += ef_sms.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_smsp = new File();
				subCodeLength += ef_smsp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_smss = new File();
				subCodeLength += ef_smss.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ssfc = new File();
				subCodeLength += ef_ssfc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_spn = new File();
				subCodeLength += ef_spn.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mdn = new File();
				subCodeLength += ef_mdn.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ecc = new File();
				subCodeLength += ef_ecc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_me3gpdopc = new File();
				subCodeLength += ef_me3gpdopc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_3gpdopm = new File();
				subCodeLength += ef_3gpdopm.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_sipcap = new File();
				subCodeLength += ef_sipcap.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mipcap = new File();
				subCodeLength += ef_mipcap.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_sipupp = new File();
				subCodeLength += ef_sipupp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mipupp = new File();
				subCodeLength += ef_mipupp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_sipsp = new File();
				subCodeLength += ef_sipsp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mipsp = new File();
				subCodeLength += ef_mipsp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_sippapss = new File();
				subCodeLength += ef_sippapss.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_puzl = new File();
				subCodeLength += ef_puzl.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_maxpuzl = new File();
				subCodeLength += ef_maxpuzl.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_hrpdcap = new File();
				subCodeLength += ef_hrpdcap.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_hrpdupp = new File();
				subCodeLength += ef_hrpdupp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_csspr = new File();
				subCodeLength += ef_csspr.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_atc = new File();
				subCodeLength += ef_atc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_eprl = new File();
				subCodeLength += ef_eprl.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_bcsmscfg = new File();
				subCodeLength += ef_bcsmscfg.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_bcsmspref = new File();
				subCodeLength += ef_bcsmspref.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_bcsmstable = new File();
				subCodeLength += ef_bcsmstable.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_bcsmsp = new File();
				subCodeLength += ef_bcsmsp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_bakpara = new File();
				subCodeLength += ef_bakpara.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_upbakpara = new File();
				subCodeLength += ef_upbakpara.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mmsn = new File();
				subCodeLength += ef_mmsn.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ext8 = new File();
				subCodeLength += ef_ext8.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mmsicp = new File();
				subCodeLength += ef_mmsicp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mmsup = new File();
				subCodeLength += ef_mmsup.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mmsucp = new File();
				subCodeLength += ef_mmsucp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_auth_capability = new File();
				subCodeLength += ef_auth_capability.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_3gcik = new File();
				subCodeLength += ef_3gcik.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_dck = new File();
				subCodeLength += ef_dck.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_gid1 = new File();
				subCodeLength += ef_gid1.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_gid2 = new File();
				subCodeLength += ef_gid2.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_cdmacnl = new File();
				subCodeLength += ef_cdmacnl.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_sf_euimid = new File();
				subCodeLength += ef_sf_euimid.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_est = new File();
				subCodeLength += ef_est.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_hidden_key = new File();
				subCodeLength += ef_hidden_key.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_lcsver = new File();
				subCodeLength += ef_lcsver.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_lcscp = new File();
				subCodeLength += ef_lcscp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_sdn = new File();
				subCodeLength += ef_sdn.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ext2 = new File();
				subCodeLength += ef_ext2.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ext3 = new File();
				subCodeLength += ef_ext3.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ici = new File();
				subCodeLength += ef_ici.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_oci = new File();
				subCodeLength += ef_oci.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ext5 = new File();
				subCodeLength += ef_ext5.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ccp2 = new File();
				subCodeLength += ef_ccp2.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_applabels = new File();
				subCodeLength += ef_applabels.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_model = new File();
				subCodeLength += ef_model.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_rc = new File();
				subCodeLength += ef_rc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_smscap = new File();
				subCodeLength += ef_smscap.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mipflags = new File();
				subCodeLength += ef_mipflags.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_3gpduppext = new File();
				subCodeLength += ef_3gpduppext.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ipv6cap = new File();
				subCodeLength += ef_ipv6cap.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_tcpconfig = new File();
				subCodeLength += ef_tcpconfig.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_dgc = new File();
				subCodeLength += ef_dgc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_wapbrowsercp = new File();
				subCodeLength += ef_wapbrowsercp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_wapbrowserbm = new File();
				subCodeLength += ef_wapbrowserbm.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mmsconfig = new File();
				subCodeLength += ef_mmsconfig.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_jdl = new File();
				subCodeLength += ef_jdl.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			int nextByte = is.read();
			if (berIdentifier.tagNumber != 0 || berIdentifier.identifierClass != 0 || berIdentifier.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(PEHeader.identifier)) {
			optcsim_header = new PEHeader();
			subCodeLength += optcsim_header.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerObjectIdentifier.identifier)) {
			templateID = new BerObjectIdentifier();
			subCodeLength += templateID.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ssci = new File();
			subCodeLength += ef_ssci.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_fdn = new File();
			subCodeLength += ef_fdn.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_sms = new File();
			subCodeLength += ef_sms.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_smsp = new File();
			subCodeLength += ef_smsp.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_smss = new File();
			subCodeLength += ef_smss.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ssfc = new File();
			subCodeLength += ef_ssfc.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_spn = new File();
			subCodeLength += ef_spn.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mdn = new File();
			subCodeLength += ef_mdn.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ecc = new File();
			subCodeLength += ef_ecc.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_me3gpdopc = new File();
			subCodeLength += ef_me3gpdopc.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_3gpdopm = new File();
			subCodeLength += ef_3gpdopm.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_sipcap = new File();
			subCodeLength += ef_sipcap.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mipcap = new File();
			subCodeLength += ef_mipcap.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_sipupp = new File();
			subCodeLength += ef_sipupp.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mipupp = new File();
			subCodeLength += ef_mipupp.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_sipsp = new File();
			subCodeLength += ef_sipsp.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mipsp = new File();
			subCodeLength += ef_mipsp.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_sippapss = new File();
			subCodeLength += ef_sippapss.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_puzl = new File();
			subCodeLength += ef_puzl.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_maxpuzl = new File();
			subCodeLength += ef_maxpuzl.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_hrpdcap = new File();
			subCodeLength += ef_hrpdcap.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_hrpdupp = new File();
			subCodeLength += ef_hrpdupp.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_csspr = new File();
			subCodeLength += ef_csspr.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_atc = new File();
			subCodeLength += ef_atc.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_eprl = new File();
			subCodeLength += ef_eprl.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_bcsmscfg = new File();
			subCodeLength += ef_bcsmscfg.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_bcsmspref = new File();
			subCodeLength += ef_bcsmspref.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_bcsmstable = new File();
			subCodeLength += ef_bcsmstable.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_bcsmsp = new File();
			subCodeLength += ef_bcsmsp.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_bakpara = new File();
			subCodeLength += ef_bakpara.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_upbakpara = new File();
			subCodeLength += ef_upbakpara.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mmsn = new File();
			subCodeLength += ef_mmsn.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ext8 = new File();
			subCodeLength += ef_ext8.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mmsicp = new File();
			subCodeLength += ef_mmsicp.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mmsup = new File();
			subCodeLength += ef_mmsup.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mmsucp = new File();
			subCodeLength += ef_mmsucp.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_auth_capability = new File();
			subCodeLength += ef_auth_capability.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_3gcik = new File();
			subCodeLength += ef_3gcik.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_dck = new File();
			subCodeLength += ef_dck.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_gid1 = new File();
			subCodeLength += ef_gid1.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_gid2 = new File();
			subCodeLength += ef_gid2.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_cdmacnl = new File();
			subCodeLength += ef_cdmacnl.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_sf_euimid = new File();
			subCodeLength += ef_sf_euimid.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_est = new File();
			subCodeLength += ef_est.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_hidden_key = new File();
			subCodeLength += ef_hidden_key.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_lcsver = new File();
			subCodeLength += ef_lcsver.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_lcscp = new File();
			subCodeLength += ef_lcscp.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_sdn = new File();
			subCodeLength += ef_sdn.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ext2 = new File();
			subCodeLength += ef_ext2.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ext3 = new File();
			subCodeLength += ef_ext3.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ici = new File();
			subCodeLength += ef_ici.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_oci = new File();
			subCodeLength += ef_oci.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ext5 = new File();
			subCodeLength += ef_ext5.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ccp2 = new File();
			subCodeLength += ef_ccp2.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_applabels = new File();
			subCodeLength += ef_applabels.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_model = new File();
			subCodeLength += ef_model.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_rc = new File();
			subCodeLength += ef_rc.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_smscap = new File();
			subCodeLength += ef_smscap.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mipflags = new File();
			subCodeLength += ef_mipflags.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_3gpduppext = new File();
			subCodeLength += ef_3gpduppext.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ipv6cap = new File();
			subCodeLength += ef_ipv6cap.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_tcpconfig = new File();
			subCodeLength += ef_tcpconfig.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_dgc = new File();
			subCodeLength += ef_dgc.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_wapbrowsercp = new File();
			subCodeLength += ef_wapbrowsercp.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_wapbrowserbm = new File();
			subCodeLength += ef_wapbrowserbm.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mmsconfig = new File();
			subCodeLength += ef_mmsconfig.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_jdl = new File();
			subCodeLength += ef_jdl.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + length.val + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("optcsim_header: ").append(optcsim_header);
		
		sb.append(", ");
		sb.append("templateID: ").append(templateID);
		
		if (ef_ssci != null) {
			sb.append(", ");
			sb.append("ef_ssci: ").append(ef_ssci);
		}
		
		if (ef_fdn != null) {
			sb.append(", ");
			sb.append("ef_fdn: ").append(ef_fdn);
		}
		
		if (ef_sms != null) {
			sb.append(", ");
			sb.append("ef_sms: ").append(ef_sms);
		}
		
		if (ef_smsp != null) {
			sb.append(", ");
			sb.append("ef_smsp: ").append(ef_smsp);
		}
		
		if (ef_smss != null) {
			sb.append(", ");
			sb.append("ef_smss: ").append(ef_smss);
		}
		
		if (ef_ssfc != null) {
			sb.append(", ");
			sb.append("ef_ssfc: ").append(ef_ssfc);
		}
		
		if (ef_spn != null) {
			sb.append(", ");
			sb.append("ef_spn: ").append(ef_spn);
		}
		
		if (ef_mdn != null) {
			sb.append(", ");
			sb.append("ef_mdn: ").append(ef_mdn);
		}
		
		if (ef_ecc != null) {
			sb.append(", ");
			sb.append("ef_ecc: ").append(ef_ecc);
		}
		
		if (ef_me3gpdopc != null) {
			sb.append(", ");
			sb.append("ef_me3gpdopc: ").append(ef_me3gpdopc);
		}
		
		if (ef_3gpdopm != null) {
			sb.append(", ");
			sb.append("ef_3gpdopm: ").append(ef_3gpdopm);
		}
		
		if (ef_sipcap != null) {
			sb.append(", ");
			sb.append("ef_sipcap: ").append(ef_sipcap);
		}
		
		if (ef_mipcap != null) {
			sb.append(", ");
			sb.append("ef_mipcap: ").append(ef_mipcap);
		}
		
		if (ef_sipupp != null) {
			sb.append(", ");
			sb.append("ef_sipupp: ").append(ef_sipupp);
		}
		
		if (ef_mipupp != null) {
			sb.append(", ");
			sb.append("ef_mipupp: ").append(ef_mipupp);
		}
		
		if (ef_sipsp != null) {
			sb.append(", ");
			sb.append("ef_sipsp: ").append(ef_sipsp);
		}
		
		if (ef_mipsp != null) {
			sb.append(", ");
			sb.append("ef_mipsp: ").append(ef_mipsp);
		}
		
		if (ef_sippapss != null) {
			sb.append(", ");
			sb.append("ef_sippapss: ").append(ef_sippapss);
		}
		
		if (ef_puzl != null) {
			sb.append(", ");
			sb.append("ef_puzl: ").append(ef_puzl);
		}
		
		if (ef_maxpuzl != null) {
			sb.append(", ");
			sb.append("ef_maxpuzl: ").append(ef_maxpuzl);
		}
		
		if (ef_hrpdcap != null) {
			sb.append(", ");
			sb.append("ef_hrpdcap: ").append(ef_hrpdcap);
		}
		
		if (ef_hrpdupp != null) {
			sb.append(", ");
			sb.append("ef_hrpdupp: ").append(ef_hrpdupp);
		}
		
		if (ef_csspr != null) {
			sb.append(", ");
			sb.append("ef_csspr: ").append(ef_csspr);
		}
		
		if (ef_atc != null) {
			sb.append(", ");
			sb.append("ef_atc: ").append(ef_atc);
		}
		
		if (ef_eprl != null) {
			sb.append(", ");
			sb.append("ef_eprl: ").append(ef_eprl);
		}
		
		if (ef_bcsmscfg != null) {
			sb.append(", ");
			sb.append("ef_bcsmscfg: ").append(ef_bcsmscfg);
		}
		
		if (ef_bcsmspref != null) {
			sb.append(", ");
			sb.append("ef_bcsmspref: ").append(ef_bcsmspref);
		}
		
		if (ef_bcsmstable != null) {
			sb.append(", ");
			sb.append("ef_bcsmstable: ").append(ef_bcsmstable);
		}
		
		if (ef_bcsmsp != null) {
			sb.append(", ");
			sb.append("ef_bcsmsp: ").append(ef_bcsmsp);
		}
		
		if (ef_bakpara != null) {
			sb.append(", ");
			sb.append("ef_bakpara: ").append(ef_bakpara);
		}
		
		if (ef_upbakpara != null) {
			sb.append(", ");
			sb.append("ef_upbakpara: ").append(ef_upbakpara);
		}
		
		if (ef_mmsn != null) {
			sb.append(", ");
			sb.append("ef_mmsn: ").append(ef_mmsn);
		}
		
		if (ef_ext8 != null) {
			sb.append(", ");
			sb.append("ef_ext8: ").append(ef_ext8);
		}
		
		if (ef_mmsicp != null) {
			sb.append(", ");
			sb.append("ef_mmsicp: ").append(ef_mmsicp);
		}
		
		if (ef_mmsup != null) {
			sb.append(", ");
			sb.append("ef_mmsup: ").append(ef_mmsup);
		}
		
		if (ef_mmsucp != null) {
			sb.append(", ");
			sb.append("ef_mmsucp: ").append(ef_mmsucp);
		}
		
		if (ef_auth_capability != null) {
			sb.append(", ");
			sb.append("ef_auth_capability: ").append(ef_auth_capability);
		}
		
		if (ef_3gcik != null) {
			sb.append(", ");
			sb.append("ef_3gcik: ").append(ef_3gcik);
		}
		
		if (ef_dck != null) {
			sb.append(", ");
			sb.append("ef_dck: ").append(ef_dck);
		}
		
		if (ef_gid1 != null) {
			sb.append(", ");
			sb.append("ef_gid1: ").append(ef_gid1);
		}
		
		if (ef_gid2 != null) {
			sb.append(", ");
			sb.append("ef_gid2: ").append(ef_gid2);
		}
		
		if (ef_cdmacnl != null) {
			sb.append(", ");
			sb.append("ef_cdmacnl: ").append(ef_cdmacnl);
		}
		
		if (ef_sf_euimid != null) {
			sb.append(", ");
			sb.append("ef_sf_euimid: ").append(ef_sf_euimid);
		}
		
		if (ef_est != null) {
			sb.append(", ");
			sb.append("ef_est: ").append(ef_est);
		}
		
		if (ef_hidden_key != null) {
			sb.append(", ");
			sb.append("ef_hidden_key: ").append(ef_hidden_key);
		}
		
		if (ef_lcsver != null) {
			sb.append(", ");
			sb.append("ef_lcsver: ").append(ef_lcsver);
		}
		
		if (ef_lcscp != null) {
			sb.append(", ");
			sb.append("ef_lcscp: ").append(ef_lcscp);
		}
		
		if (ef_sdn != null) {
			sb.append(", ");
			sb.append("ef_sdn: ").append(ef_sdn);
		}
		
		if (ef_ext2 != null) {
			sb.append(", ");
			sb.append("ef_ext2: ").append(ef_ext2);
		}
		
		if (ef_ext3 != null) {
			sb.append(", ");
			sb.append("ef_ext3: ").append(ef_ext3);
		}
		
		if (ef_ici != null) {
			sb.append(", ");
			sb.append("ef_ici: ").append(ef_ici);
		}
		
		if (ef_oci != null) {
			sb.append(", ");
			sb.append("ef_oci: ").append(ef_oci);
		}
		
		if (ef_ext5 != null) {
			sb.append(", ");
			sb.append("ef_ext5: ").append(ef_ext5);
		}
		
		if (ef_ccp2 != null) {
			sb.append(", ");
			sb.append("ef_ccp2: ").append(ef_ccp2);
		}
		
		if (ef_applabels != null) {
			sb.append(", ");
			sb.append("ef_applabels: ").append(ef_applabels);
		}
		
		if (ef_model != null) {
			sb.append(", ");
			sb.append("ef_model: ").append(ef_model);
		}
		
		if (ef_rc != null) {
			sb.append(", ");
			sb.append("ef_rc: ").append(ef_rc);
		}
		
		if (ef_smscap != null) {
			sb.append(", ");
			sb.append("ef_smscap: ").append(ef_smscap);
		}
		
		if (ef_mipflags != null) {
			sb.append(", ");
			sb.append("ef_mipflags: ").append(ef_mipflags);
		}
		
		if (ef_3gpduppext != null) {
			sb.append(", ");
			sb.append("ef_3gpduppext: ").append(ef_3gpduppext);
		}
		
		if (ef_ipv6cap != null) {
			sb.append(", ");
			sb.append("ef_ipv6cap: ").append(ef_ipv6cap);
		}
		
		if (ef_tcpconfig != null) {
			sb.append(", ");
			sb.append("ef_tcpconfig: ").append(ef_tcpconfig);
		}
		
		if (ef_dgc != null) {
			sb.append(", ");
			sb.append("ef_dgc: ").append(ef_dgc);
		}
		
		if (ef_wapbrowsercp != null) {
			sb.append(", ");
			sb.append("ef_wapbrowsercp: ").append(ef_wapbrowsercp);
		}
		
		if (ef_wapbrowserbm != null) {
			sb.append(", ");
			sb.append("ef_wapbrowserbm: ").append(ef_wapbrowserbm);
		}
		
		if (ef_mmsconfig != null) {
			sb.append(", ");
			sb.append("ef_mmsconfig: ").append(ef_mmsconfig);
		}
		
		if (ef_jdl != null) {
			sb.append(", ");
			sb.append("ef_jdl: ").append(ef_jdl);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

