/**
 * This class file was automatically generated by jASN1 v1.5.0 (http://www.openmuc.org)
 */

package com.simless.mnohub.compiler.simalliance.generated.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PE_CDMAParameter {

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public PEHeader cdma_header = null;

	public BerOctetString authenticationKey = null;

	public BerOctetString ssd = null;

	public BerOctetString hrpdAccessAuthenticationData = null;

	public BerOctetString simpleIPAuthenticationData = null;

	public BerOctetString mobileIPAuthenticationData = null;

	public PE_CDMAParameter() {
		id = identifier;
	}

	public PE_CDMAParameter(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public PE_CDMAParameter(PEHeader cdma_header, BerOctetString authenticationKey, BerOctetString ssd, BerOctetString hrpdAccessAuthenticationData, BerOctetString simpleIPAuthenticationData, BerOctetString mobileIPAuthenticationData) {
		id = identifier;
		this.cdma_header = cdma_header;
		this.authenticationKey = authenticationKey;
		this.ssd = ssd;
		this.hrpdAccessAuthenticationData = hrpdAccessAuthenticationData;
		this.simpleIPAuthenticationData = simpleIPAuthenticationData;
		this.mobileIPAuthenticationData = mobileIPAuthenticationData;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (mobileIPAuthenticationData != null) {
				codeLength += mobileIPAuthenticationData.encode(os, true);
			}
			
			if (simpleIPAuthenticationData != null) {
				codeLength += simpleIPAuthenticationData.encode(os, true);
			}
			
			if (hrpdAccessAuthenticationData != null) {
				codeLength += hrpdAccessAuthenticationData.encode(os, true);
			}
			
			if (ssd != null) {
				codeLength += ssd.encode(os, true);
			}
			
			codeLength += authenticationKey.encode(os, true);
			
			codeLength += cdma_header.encode(os, true);
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		codeLength += length.val;

		if (length.val == -1) {
			subCodeLength += berIdentifier.decode(is);

			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(PEHeader.identifier)) {
				cdma_header = new PEHeader();
				subCodeLength += cdma_header.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerOctetString.identifier)) {
				authenticationKey = new BerOctetString();
				subCodeLength += authenticationKey.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerOctetString.identifier)) {
				ssd = new BerOctetString();
				subCodeLength += ssd.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerOctetString.identifier)) {
				hrpdAccessAuthenticationData = new BerOctetString();
				subCodeLength += hrpdAccessAuthenticationData.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerOctetString.identifier)) {
				simpleIPAuthenticationData = new BerOctetString();
				subCodeLength += simpleIPAuthenticationData.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerOctetString.identifier)) {
				mobileIPAuthenticationData = new BerOctetString();
				subCodeLength += mobileIPAuthenticationData.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			int nextByte = is.read();
			if (berIdentifier.tagNumber != 0 || berIdentifier.identifierClass != 0 || berIdentifier.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(PEHeader.identifier)) {
			cdma_header = new PEHeader();
			subCodeLength += cdma_header.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerOctetString.identifier)) {
			authenticationKey = new BerOctetString();
			subCodeLength += authenticationKey.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerOctetString.identifier)) {
			ssd = new BerOctetString();
			subCodeLength += ssd.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerOctetString.identifier)) {
			hrpdAccessAuthenticationData = new BerOctetString();
			subCodeLength += hrpdAccessAuthenticationData.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerOctetString.identifier)) {
			simpleIPAuthenticationData = new BerOctetString();
			subCodeLength += simpleIPAuthenticationData.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerOctetString.identifier)) {
			mobileIPAuthenticationData = new BerOctetString();
			subCodeLength += mobileIPAuthenticationData.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + length.val + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("cdma_header: ").append(cdma_header);
		
		sb.append(", ");
		sb.append("authenticationKey: ").append(authenticationKey);
		
		if (ssd != null) {
			sb.append(", ");
			sb.append("ssd: ").append(ssd);
		}
		
		if (hrpdAccessAuthenticationData != null) {
			sb.append(", ");
			sb.append("hrpdAccessAuthenticationData: ").append(hrpdAccessAuthenticationData);
		}
		
		if (simpleIPAuthenticationData != null) {
			sb.append(", ");
			sb.append("simpleIPAuthenticationData: ").append(simpleIPAuthenticationData);
		}
		
		if (mobileIPAuthenticationData != null) {
			sb.append(", ");
			sb.append("mobileIPAuthenticationData: ").append(mobileIPAuthenticationData);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

