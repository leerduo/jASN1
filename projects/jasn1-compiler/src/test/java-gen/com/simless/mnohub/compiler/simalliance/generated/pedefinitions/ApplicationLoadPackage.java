/**
 * This class file was automatically generated by jASN1 v1.5.0 (http://www.openmuc.org)
 */

package com.simless.mnohub.compiler.simalliance.generated.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class ApplicationLoadPackage {

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public ApplicationIdentifier loadPackageAID = null;

	public ApplicationIdentifier securityDomainAID = null;

	public BerOctetString nonVolatileCodeLimitC6 = null;

	public BerOctetString volatileDataLimitC7 = null;

	public BerOctetString nonVolatileDataLimitC8 = null;

	public BerOctetString hashValue = null;

	public BerOctetString loadBlockObject = null;

	public ApplicationLoadPackage() {
		id = identifier;
	}

	public ApplicationLoadPackage(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public ApplicationLoadPackage(ApplicationIdentifier loadPackageAID, ApplicationIdentifier securityDomainAID, BerOctetString nonVolatileCodeLimitC6, BerOctetString volatileDataLimitC7, BerOctetString nonVolatileDataLimitC8, BerOctetString hashValue, BerOctetString loadBlockObject) {
		id = identifier;
		this.loadPackageAID = loadPackageAID;
		this.securityDomainAID = securityDomainAID;
		this.nonVolatileCodeLimitC6 = nonVolatileCodeLimitC6;
		this.volatileDataLimitC7 = volatileDataLimitC7;
		this.nonVolatileDataLimitC8 = nonVolatileDataLimitC8;
		this.hashValue = hashValue;
		this.loadBlockObject = loadBlockObject;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			int sublength;

			sublength = loadBlockObject.encode(os, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag {PRIVATE_CLASS, CONSTRUCTED, 4}
			os.write(0xe4);
			codeLength += 1;
			
			if (hashValue != null) {
				sublength = hashValue.encode(os, true);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(os, sublength);
				// write tag {PRIVATE_CLASS, CONSTRUCTED, 1}
				os.write(0xe1);
				codeLength += 1;
			}
			
			if (nonVolatileDataLimitC8 != null) {
				sublength = nonVolatileDataLimitC8.encode(os, true);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(os, sublength);
				// write tag {PRIVATE_CLASS, CONSTRUCTED, 8}
				os.write(0xe8);
				codeLength += 1;
			}
			
			if (volatileDataLimitC7 != null) {
				sublength = volatileDataLimitC7.encode(os, true);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(os, sublength);
				// write tag {PRIVATE_CLASS, CONSTRUCTED, 7}
				os.write(0xe7);
				codeLength += 1;
			}
			
			if (nonVolatileCodeLimitC6 != null) {
				sublength = nonVolatileCodeLimitC6.encode(os, true);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(os, sublength);
				// write tag {PRIVATE_CLASS, CONSTRUCTED, 6}
				os.write(0xe6);
				codeLength += 1;
			}
			
			if (securityDomainAID != null) {
				sublength = securityDomainAID.encode(os, true);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(os, sublength);
				// write tag {APPLICATION_CLASS, CONSTRUCTED, 15}
				os.write(0x6f);
				codeLength += 1;
			}
			
			sublength = loadPackageAID.encode(os, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag {APPLICATION_CLASS, CONSTRUCTED, 15}
			os.write(0x6f);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		codeLength += length.val;

		if (length.val == -1) {
			subCodeLength += berIdentifier.decode(is);

			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
				subCodeLength += new BerLength().decode(is);
				loadPackageAID = new ApplicationIdentifier();
				subCodeLength += loadPackageAID.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
				subCodeLength += new BerLength().decode(is);
				securityDomainAID = new ApplicationIdentifier();
				subCodeLength += securityDomainAID.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 6)) {
				subCodeLength += new BerLength().decode(is);
				nonVolatileCodeLimitC6 = new BerOctetString();
				subCodeLength += nonVolatileCodeLimitC6.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 7)) {
				subCodeLength += new BerLength().decode(is);
				volatileDataLimitC7 = new BerOctetString();
				subCodeLength += volatileDataLimitC7.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 8)) {
				subCodeLength += new BerLength().decode(is);
				nonVolatileDataLimitC8 = new BerOctetString();
				subCodeLength += nonVolatileDataLimitC8.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 1)) {
				subCodeLength += new BerLength().decode(is);
				hashValue = new BerOctetString();
				subCodeLength += hashValue.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 4)) {
				subCodeLength += new BerLength().decode(is);
				loadBlockObject = new BerOctetString();
				subCodeLength += loadBlockObject.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			int nextByte = is.read();
			if (berIdentifier.tagNumber != 0 || berIdentifier.identifierClass != 0 || berIdentifier.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
			subCodeLength += new BerLength().decode(is);
			loadPackageAID = new ApplicationIdentifier();
			subCodeLength += loadPackageAID.decode(is, true);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
			subCodeLength += new BerLength().decode(is);
			securityDomainAID = new ApplicationIdentifier();
			subCodeLength += securityDomainAID.decode(is, true);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 6)) {
			subCodeLength += new BerLength().decode(is);
			nonVolatileCodeLimitC6 = new BerOctetString();
			subCodeLength += nonVolatileCodeLimitC6.decode(is, true);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 7)) {
			subCodeLength += new BerLength().decode(is);
			volatileDataLimitC7 = new BerOctetString();
			subCodeLength += volatileDataLimitC7.decode(is, true);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 8)) {
			subCodeLength += new BerLength().decode(is);
			nonVolatileDataLimitC8 = new BerOctetString();
			subCodeLength += nonVolatileDataLimitC8.decode(is, true);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 1)) {
			subCodeLength += new BerLength().decode(is);
			hashValue = new BerOctetString();
			subCodeLength += hashValue.decode(is, true);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 4)) {
			subCodeLength += new BerLength().decode(is);
			loadBlockObject = new BerOctetString();
			subCodeLength += loadBlockObject.decode(is, true);
			if (subCodeLength == length.val) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + length.val + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("loadPackageAID: ").append(loadPackageAID);
		
		if (securityDomainAID != null) {
			sb.append(", ");
			sb.append("securityDomainAID: ").append(securityDomainAID);
		}
		
		if (nonVolatileCodeLimitC6 != null) {
			sb.append(", ");
			sb.append("nonVolatileCodeLimitC6: ").append(nonVolatileCodeLimitC6);
		}
		
		if (volatileDataLimitC7 != null) {
			sb.append(", ");
			sb.append("volatileDataLimitC7: ").append(volatileDataLimitC7);
		}
		
		if (nonVolatileDataLimitC8 != null) {
			sb.append(", ");
			sb.append("nonVolatileDataLimitC8: ").append(nonVolatileDataLimitC8);
		}
		
		if (hashValue != null) {
			sb.append(", ");
			sb.append("hashValue: ").append(hashValue);
		}
		
		sb.append(", ");
		sb.append("loadBlockObject: ").append(loadBlockObject);
		
		sb.append("}");
		return sb.toString();
	}

}

