/**
 * This class file was automatically generated by jASN1 v1.5.0 (http://www.openmuc.org)
 */

package org.example.compiler.simalliance.generated.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class ApplicationInstance {

	public static class SubSeqOf_processData {

		public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
		protected BerIdentifier id;

		public byte[] code = null;
		public List<BerOctetString> seqOf = null;

		public SubSeqOf_processData() {
			id = identifier;
			seqOf = new ArrayList<BerOctetString>();
		}

		public SubSeqOf_processData(byte[] code) {
			id = identifier;
			this.code = code;
		}

		public SubSeqOf_processData(List<BerOctetString> seqOf) {
			id = identifier;
			this.seqOf = seqOf;
		}

		public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {
			int codeLength;

			if (code != null) {
				codeLength = code.length;
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
			}
			else {
				codeLength = 0;
				for (int i = (seqOf.size() - 1); i >= 0; i--) {
					codeLength += seqOf.get(i).encode(os, true);
				}

				codeLength += BerLength.encodeLength(os, codeLength);

			}

			if (explicit) {
				codeLength += id.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is, boolean explicit) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (explicit) {
				codeLength += id.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			if (length.val == -1) {
				BerIdentifier berIdentifier = new BerIdentifier();
				while (true) {
					subCodeLength += berIdentifier.decode(is);

					if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
						int nextByte = is.read();
						if (nextByte != 0) {
							if (nextByte == -1) {
								throw new EOFException("Unexpected end of input stream.");
							}
							throw new IOException("Decoded sequence has wrong end of contents octets");
						}
						codeLength += subCodeLength + 1;
						return codeLength;
					}

					BerOctetString element = new BerOctetString();
					subCodeLength += element.decode(is, false);
					seqOf.add(element);
				}
			}
			while (subCodeLength < length.val) {
				BerOctetString element = new BerOctetString();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != length.val) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length tag");

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("SEQUENCE OF{");

			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<BerOctetString> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(", ").append(it.next());
					}
				}
			}

			sb.append("}");

			return sb.toString();
		}

	}

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 0);
	protected BerIdentifier id;

	public byte[] code = null;
	public ApplicationIdentifier applicationLoadPackageAID = null;

	public ApplicationIdentifier classAID = null;

	public ApplicationIdentifier instanceAID = null;

	public ApplicationIdentifier extraditeSecurityDomainAID = null;

	public BerOctetString applicationPrivileges = null;

	public BerOctetString lifeCycleState = null;

	public BerOctetString applicationSpecificParametersC9 = null;

	public ApplicationSystemParameters systemSpecificParameters = null;

	public UICCApplicationParameters applicationParameters = null;

	public SubSeqOf_processData processData = null;

	public ApplicationInstance() {
		id = identifier;
	}

	public ApplicationInstance(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public ApplicationInstance(ApplicationIdentifier applicationLoadPackageAID, ApplicationIdentifier classAID, ApplicationIdentifier instanceAID, ApplicationIdentifier extraditeSecurityDomainAID, BerOctetString applicationPrivileges, BerOctetString lifeCycleState, BerOctetString applicationSpecificParametersC9, ApplicationSystemParameters systemSpecificParameters, UICCApplicationParameters applicationParameters, SubSeqOf_processData processData) {
		id = identifier;
		this.applicationLoadPackageAID = applicationLoadPackageAID;
		this.classAID = classAID;
		this.instanceAID = instanceAID;
		this.extraditeSecurityDomainAID = extraditeSecurityDomainAID;
		this.applicationPrivileges = applicationPrivileges;
		this.lifeCycleState = lifeCycleState;
		this.applicationSpecificParametersC9 = applicationSpecificParametersC9;
		this.systemSpecificParameters = systemSpecificParameters;
		this.applicationParameters = applicationParameters;
		this.processData = processData;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			int sublength;

			if (processData != null) {
				codeLength += processData.encode(os, true);
			}
			
			if (applicationParameters != null) {
				sublength = applicationParameters.encode(os, true);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(os, sublength);
				// write tag {PRIVATE_CLASS, CONSTRUCTED, 10}
				os.write(0xea);
				codeLength += 1;
			}
			
			if (systemSpecificParameters != null) {
				sublength = systemSpecificParameters.encode(os, true);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(os, sublength);
				// write tag {PRIVATE_CLASS, CONSTRUCTED, 15}
				os.write(0xef);
				codeLength += 1;
			}
			
			sublength = applicationSpecificParametersC9.encode(os, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag {PRIVATE_CLASS, CONSTRUCTED, 9}
			os.write(0xe9);
			codeLength += 1;
			
			if (lifeCycleState != null) {
				sublength = lifeCycleState.encode(os, true);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(os, sublength);
				// write tag {CONTEXT_CLASS, CONSTRUCTED, 3}
				os.write(0xa3);
				codeLength += 1;
			}
			
			sublength = applicationPrivileges.encode(os, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag {CONTEXT_CLASS, CONSTRUCTED, 2}
			os.write(0xa2);
			codeLength += 1;
			
			if (extraditeSecurityDomainAID != null) {
				sublength = extraditeSecurityDomainAID.encode(os, true);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(os, sublength);
				// write tag {APPLICATION_CLASS, CONSTRUCTED, 15}
				os.write(0x6f);
				codeLength += 1;
			}
			
			sublength = instanceAID.encode(os, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag {APPLICATION_CLASS, CONSTRUCTED, 15}
			os.write(0x6f);
			codeLength += 1;
			
			sublength = classAID.encode(os, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag {APPLICATION_CLASS, CONSTRUCTED, 15}
			os.write(0x6f);
			codeLength += 1;
			
			sublength = applicationLoadPackageAID.encode(os, true);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag {APPLICATION_CLASS, CONSTRUCTED, 15}
			os.write(0x6f);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		codeLength += length.val;

		if (length.val == -1) {
			subCodeLength += berIdentifier.decode(is);

			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
				subCodeLength += new BerLength().decode(is);
				applicationLoadPackageAID = new ApplicationIdentifier();
				applicationLoadPackageAID.id = new BerIdentifier(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15);
				subCodeLength += applicationLoadPackageAID.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
				subCodeLength += new BerLength().decode(is);
				classAID = new ApplicationIdentifier();
				classAID.id = new BerIdentifier(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15);
				subCodeLength += classAID.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
				subCodeLength += new BerLength().decode(is);
				instanceAID = new ApplicationIdentifier();
				instanceAID.id = new BerIdentifier(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15);
				subCodeLength += instanceAID.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
				subCodeLength += new BerLength().decode(is);
				extraditeSecurityDomainAID = new ApplicationIdentifier();
				extraditeSecurityDomainAID.id = new BerIdentifier(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15);
				subCodeLength += extraditeSecurityDomainAID.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)) {
				subCodeLength += new BerLength().decode(is);
				applicationPrivileges = new BerOctetString();
				applicationPrivileges.id = new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2);
				subCodeLength += applicationPrivileges.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 3)) {
				subCodeLength += new BerLength().decode(is);
				lifeCycleState = new BerOctetString();
				lifeCycleState.id = new BerIdentifier(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 3);
				subCodeLength += lifeCycleState.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 9)) {
				subCodeLength += new BerLength().decode(is);
				applicationSpecificParametersC9 = new BerOctetString();
				applicationSpecificParametersC9.id = new BerIdentifier(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 9);
				subCodeLength += applicationSpecificParametersC9.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
				subCodeLength += new BerLength().decode(is);
				systemSpecificParameters = new ApplicationSystemParameters();
				systemSpecificParameters.id = new BerIdentifier(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 15);
				subCodeLength += systemSpecificParameters.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 10)) {
				subCodeLength += new BerLength().decode(is);
				applicationParameters = new UICCApplicationParameters();
				applicationParameters.id = new BerIdentifier(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 10);
				subCodeLength += applicationParameters.decode(is, true);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(SubSeqOf_processData.identifier)) {
				processData = new SubSeqOf_processData();
				subCodeLength += processData.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			int nextByte = is.read();
			if (berIdentifier.tagNumber != 0 || berIdentifier.identifierClass != 0 || berIdentifier.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
			subCodeLength += new BerLength().decode(is);
			applicationLoadPackageAID = new ApplicationIdentifier();
			subCodeLength += applicationLoadPackageAID.decode(is, true);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
			subCodeLength += new BerLength().decode(is);
			classAID = new ApplicationIdentifier();
			subCodeLength += classAID.decode(is, true);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
			subCodeLength += new BerLength().decode(is);
			instanceAID = new ApplicationIdentifier();
			subCodeLength += instanceAID.decode(is, true);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.APPLICATION_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
			subCodeLength += new BerLength().decode(is);
			extraditeSecurityDomainAID = new ApplicationIdentifier();
			subCodeLength += extraditeSecurityDomainAID.decode(is, true);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)) {
			subCodeLength += new BerLength().decode(is);
			applicationPrivileges = new BerOctetString();
			subCodeLength += applicationPrivileges.decode(is, true);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 3)) {
			subCodeLength += new BerLength().decode(is);
			lifeCycleState = new BerOctetString();
			subCodeLength += lifeCycleState.decode(is, true);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 9)) {
			subCodeLength += new BerLength().decode(is);
			applicationSpecificParametersC9 = new BerOctetString();
			subCodeLength += applicationSpecificParametersC9.decode(is, true);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 15)) {
			subCodeLength += new BerLength().decode(is);
			systemSpecificParameters = new ApplicationSystemParameters();
			subCodeLength += systemSpecificParameters.decode(is, true);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.PRIVATE_CLASS, BerIdentifier.CONSTRUCTED, 10)) {
			subCodeLength += new BerLength().decode(is);
			applicationParameters = new UICCApplicationParameters();
			subCodeLength += applicationParameters.decode(is, true);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(SubSeqOf_processData.identifier)) {
			processData = new SubSeqOf_processData();
			subCodeLength += processData.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + length.val + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("applicationLoadPackageAID: ").append(applicationLoadPackageAID);
		
		sb.append(", ");
		sb.append("classAID: ").append(classAID);
		
		sb.append(", ");
		sb.append("instanceAID: ").append(instanceAID);
		
		if (extraditeSecurityDomainAID != null) {
			sb.append(", ");
			sb.append("extraditeSecurityDomainAID: ").append(extraditeSecurityDomainAID);
		}
		
		sb.append(", ");
		sb.append("applicationPrivileges: ").append(applicationPrivileges);
		
		if (lifeCycleState != null) {
			sb.append(", ");
			sb.append("lifeCycleState: ").append(lifeCycleState);
		}
		
		sb.append(", ");
		sb.append("applicationSpecificParametersC9: ").append(applicationSpecificParametersC9);
		
		if (systemSpecificParameters != null) {
			sb.append(", ");
			sb.append("systemSpecificParameters: ").append(systemSpecificParameters);
		}
		
		if (applicationParameters != null) {
			sb.append(", ");
			sb.append("applicationParameters: ").append(applicationParameters);
		}
		
		if (processData != null) {
			sb.append(", ");
			sb.append("processData: ").append(processData);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

