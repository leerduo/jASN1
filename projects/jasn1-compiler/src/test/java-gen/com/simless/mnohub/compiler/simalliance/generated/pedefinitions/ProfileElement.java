/**
 * This class file was automatically generated by jASN1 v1.5.0 (http://www.openmuc.org)
 */

package com.simless.mnohub.compiler.simalliance.generated.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class ProfileElement {

	public byte[] code = null;
	public ProfileHeader header = null;

	public PE_GenericFileManagement genericFileManagement = null;

	public PE_PINCodes pinCodes = null;

	public PE_PUKCodes pukCodes = null;

	public PE_AKAParameter akaParameter = null;

	public PE_CDMAParameter cdmaParameter = null;

	public PE_SecurityDomain securityDomain = null;

	public PE_RFM rfm = null;

	public PE_Application application = null;

	public PE_NonStandard nonStandard = null;

	public PE_End end = null;

	public PE_Dummy rfu1 = null;

	public PE_Dummy rfu2 = null;

	public PE_Dummy rfu3 = null;

	public PE_Dummy rfu4 = null;

	public PE_Dummy rfu5 = null;

	public PE_MF mf = null;

	public PE_CD cd = null;

	public PE_TELECOM telecom = null;

	public PE_USIM usim = null;

	public PE_OPT_USIM opt_usim = null;

	public PE_ISIM isim = null;

	public PE_OPT_ISIM opt_isim = null;

	public PE_PHONEBOOK phonebook = null;

	public PE_GSM_ACCESS gsm_access = null;

	public PE_CSIM csim = null;

	public PE_OPT_CSIM opt_csim = null;

	public ProfileElement() {
	}

	public ProfileElement(byte[] code) {
		this.code = code;
	}

	public ProfileElement(ProfileHeader header, PE_GenericFileManagement genericFileManagement, PE_PINCodes pinCodes, PE_PUKCodes pukCodes, PE_AKAParameter akaParameter, PE_CDMAParameter cdmaParameter, PE_SecurityDomain securityDomain, PE_RFM rfm, PE_Application application, PE_NonStandard nonStandard, PE_End end, PE_Dummy rfu1, PE_Dummy rfu2, PE_Dummy rfu3, PE_Dummy rfu4, PE_Dummy rfu5, PE_MF mf, PE_CD cd, PE_TELECOM telecom, PE_USIM usim, PE_OPT_USIM opt_usim, PE_ISIM isim, PE_OPT_ISIM opt_isim, PE_PHONEBOOK phonebook, PE_GSM_ACCESS gsm_access, PE_CSIM csim, PE_OPT_CSIM opt_csim) {
		this.header = header;
		this.genericFileManagement = genericFileManagement;
		this.pinCodes = pinCodes;
		this.pukCodes = pukCodes;
		this.akaParameter = akaParameter;
		this.cdmaParameter = cdmaParameter;
		this.securityDomain = securityDomain;
		this.rfm = rfm;
		this.application = application;
		this.nonStandard = nonStandard;
		this.end = end;
		this.rfu1 = rfu1;
		this.rfu2 = rfu2;
		this.rfu3 = rfu3;
		this.rfu4 = rfu4;
		this.rfu5 = rfu5;
		this.mf = mf;
		this.cd = cd;
		this.telecom = telecom;
		this.usim = usim;
		this.opt_usim = opt_usim;
		this.isim = isim;
		this.opt_isim = opt_isim;
		this.phonebook = phonebook;
		this.gsm_access = gsm_access;
		this.csim = csim;
		this.opt_csim = opt_csim;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {
		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;

		}
		int codeLength = 0;
		if (opt_csim != null) {
			codeLength += opt_csim.encode(os, true);
			return codeLength;

		}
		
		if (csim != null) {
			codeLength += csim.encode(os, true);
			return codeLength;

		}
		
		if (gsm_access != null) {
			codeLength += gsm_access.encode(os, true);
			return codeLength;

		}
		
		if (phonebook != null) {
			codeLength += phonebook.encode(os, true);
			return codeLength;

		}
		
		if (opt_isim != null) {
			codeLength += opt_isim.encode(os, true);
			return codeLength;

		}
		
		if (isim != null) {
			codeLength += isim.encode(os, true);
			return codeLength;

		}
		
		if (opt_usim != null) {
			codeLength += opt_usim.encode(os, true);
			return codeLength;

		}
		
		if (usim != null) {
			codeLength += usim.encode(os, true);
			return codeLength;

		}
		
		if (telecom != null) {
			codeLength += telecom.encode(os, true);
			return codeLength;

		}
		
		if (cd != null) {
			codeLength += cd.encode(os, true);
			return codeLength;

		}
		
		if (mf != null) {
			codeLength += mf.encode(os, true);
			return codeLength;

		}
		
		if (rfu5 != null) {
			codeLength += rfu5.encode(os, true);
			return codeLength;

		}
		
		if (rfu4 != null) {
			codeLength += rfu4.encode(os, true);
			return codeLength;

		}
		
		if (rfu3 != null) {
			codeLength += rfu3.encode(os, true);
			return codeLength;

		}
		
		if (rfu2 != null) {
			codeLength += rfu2.encode(os, true);
			return codeLength;

		}
		
		if (rfu1 != null) {
			codeLength += rfu1.encode(os, true);
			return codeLength;

		}
		
		if (end != null) {
			codeLength += end.encode(os, true);
			return codeLength;

		}
		
		if (nonStandard != null) {
			codeLength += nonStandard.encode(os, true);
			return codeLength;

		}
		
		if (application != null) {
			codeLength += application.encode(os, true);
			return codeLength;

		}
		
		if (rfm != null) {
			codeLength += rfm.encode(os, true);
			return codeLength;

		}
		
		if (securityDomain != null) {
			codeLength += securityDomain.encode(os, true);
			return codeLength;

		}
		
		if (cdmaParameter != null) {
			codeLength += cdmaParameter.encode(os, true);
			return codeLength;

		}
		
		if (akaParameter != null) {
			codeLength += akaParameter.encode(os, true);
			return codeLength;

		}
		
		if (pukCodes != null) {
			codeLength += pukCodes.encode(os, true);
			return codeLength;

		}
		
		if (pinCodes != null) {
			codeLength += pinCodes.encode(os, true);
			return codeLength;

		}
		
		if (genericFileManagement != null) {
			codeLength += genericFileManagement.encode(os, true);
			return codeLength;

		}
		
		if (header != null) {
			codeLength += header.encode(os, true);
			return codeLength;

		}
		
		throw new IOException("Error encoding BerChoice: No item in choice was selected.");
	}

	public int decode(InputStream is, BerIdentifier berIdentifier) throws IOException {
		int codeLength = 0;
		BerIdentifier passedIdentifier = berIdentifier;

		if (berIdentifier == null) {
			berIdentifier = new BerIdentifier();
			codeLength += berIdentifier.decode(is);
		}
		if (berIdentifier.equals(ProfileHeader.identifier)) {
			header = new ProfileHeader();
			codeLength += header.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_GenericFileManagement.identifier)) {
			genericFileManagement = new PE_GenericFileManagement();
			codeLength += genericFileManagement.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_PINCodes.identifier)) {
			pinCodes = new PE_PINCodes();
			codeLength += pinCodes.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_PUKCodes.identifier)) {
			pukCodes = new PE_PUKCodes();
			codeLength += pukCodes.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_AKAParameter.identifier)) {
			akaParameter = new PE_AKAParameter();
			codeLength += akaParameter.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_CDMAParameter.identifier)) {
			cdmaParameter = new PE_CDMAParameter();
			codeLength += cdmaParameter.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_SecurityDomain.identifier)) {
			securityDomain = new PE_SecurityDomain();
			codeLength += securityDomain.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_RFM.identifier)) {
			rfm = new PE_RFM();
			codeLength += rfm.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_Application.identifier)) {
			application = new PE_Application();
			codeLength += application.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_NonStandard.identifier)) {
			nonStandard = new PE_NonStandard();
			codeLength += nonStandard.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_End.identifier)) {
			end = new PE_End();
			codeLength += end.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_Dummy.identifier)) {
			rfu1 = new PE_Dummy();
			codeLength += rfu1.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_Dummy.identifier)) {
			rfu2 = new PE_Dummy();
			codeLength += rfu2.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_Dummy.identifier)) {
			rfu3 = new PE_Dummy();
			codeLength += rfu3.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_Dummy.identifier)) {
			rfu4 = new PE_Dummy();
			codeLength += rfu4.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_Dummy.identifier)) {
			rfu5 = new PE_Dummy();
			codeLength += rfu5.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_MF.identifier)) {
			mf = new PE_MF();
			codeLength += mf.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_CD.identifier)) {
			cd = new PE_CD();
			codeLength += cd.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_TELECOM.identifier)) {
			telecom = new PE_TELECOM();
			codeLength += telecom.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_USIM.identifier)) {
			usim = new PE_USIM();
			codeLength += usim.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_OPT_USIM.identifier)) {
			opt_usim = new PE_OPT_USIM();
			codeLength += opt_usim.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_ISIM.identifier)) {
			isim = new PE_ISIM();
			codeLength += isim.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_OPT_ISIM.identifier)) {
			opt_isim = new PE_OPT_ISIM();
			codeLength += opt_isim.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_PHONEBOOK.identifier)) {
			phonebook = new PE_PHONEBOOK();
			codeLength += phonebook.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_GSM_ACCESS.identifier)) {
			gsm_access = new PE_GSM_ACCESS();
			codeLength += gsm_access.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_CSIM.identifier)) {
			csim = new PE_CSIM();
			codeLength += csim.decode(is, false);
			return codeLength;
		}

		if (berIdentifier.equals(PE_OPT_CSIM.identifier)) {
			opt_csim = new PE_OPT_CSIM();
			codeLength += opt_csim.decode(is, false);
			return codeLength;
		}

		if (passedIdentifier != null) {
			return 0;
		}
		throw new IOException("Error decoding BerChoice: Identifier matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		if ( header!= null) {
			return "CHOICE{header: " + header + "}";
		}

		if ( genericFileManagement!= null) {
			return "CHOICE{genericFileManagement: " + genericFileManagement + "}";
		}

		if ( pinCodes!= null) {
			return "CHOICE{pinCodes: " + pinCodes + "}";
		}

		if ( pukCodes!= null) {
			return "CHOICE{pukCodes: " + pukCodes + "}";
		}

		if ( akaParameter!= null) {
			return "CHOICE{akaParameter: " + akaParameter + "}";
		}

		if ( cdmaParameter!= null) {
			return "CHOICE{cdmaParameter: " + cdmaParameter + "}";
		}

		if ( securityDomain!= null) {
			return "CHOICE{securityDomain: " + securityDomain + "}";
		}

		if ( rfm!= null) {
			return "CHOICE{rfm: " + rfm + "}";
		}

		if ( application!= null) {
			return "CHOICE{application: " + application + "}";
		}

		if ( nonStandard!= null) {
			return "CHOICE{nonStandard: " + nonStandard + "}";
		}

		if ( end!= null) {
			return "CHOICE{end: " + end + "}";
		}

		if ( rfu1!= null) {
			return "CHOICE{rfu1: " + rfu1 + "}";
		}

		if ( rfu2!= null) {
			return "CHOICE{rfu2: " + rfu2 + "}";
		}

		if ( rfu3!= null) {
			return "CHOICE{rfu3: " + rfu3 + "}";
		}

		if ( rfu4!= null) {
			return "CHOICE{rfu4: " + rfu4 + "}";
		}

		if ( rfu5!= null) {
			return "CHOICE{rfu5: " + rfu5 + "}";
		}

		if ( mf!= null) {
			return "CHOICE{mf: " + mf + "}";
		}

		if ( cd!= null) {
			return "CHOICE{cd: " + cd + "}";
		}

		if ( telecom!= null) {
			return "CHOICE{telecom: " + telecom + "}";
		}

		if ( usim!= null) {
			return "CHOICE{usim: " + usim + "}";
		}

		if ( opt_usim!= null) {
			return "CHOICE{opt_usim: " + opt_usim + "}";
		}

		if ( isim!= null) {
			return "CHOICE{isim: " + isim + "}";
		}

		if ( opt_isim!= null) {
			return "CHOICE{opt_isim: " + opt_isim + "}";
		}

		if ( phonebook!= null) {
			return "CHOICE{phonebook: " + phonebook + "}";
		}

		if ( gsm_access!= null) {
			return "CHOICE{gsm_access: " + gsm_access + "}";
		}

		if ( csim!= null) {
			return "CHOICE{csim: " + csim + "}";
		}

		if ( opt_csim!= null) {
			return "CHOICE{opt_csim: " + opt_csim + "}";
		}

		return "unknown";
	}

}

