/**
 * This class file was automatically generated by jASN1 v1.5.0 (http://www.openmuc.org)
 */

package com.simless.mnohub.compiler.simalliance.generated.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PE_TELECOM {

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public PEHeader telecom_header = null;

	public BerObjectIdentifier templateID = null;

	public File df_telecom = null;

	public File ef_arr = null;

	public File ef_rma = null;

	public File ef_sume = null;

	public File ef_ice_dn = null;

	public File ef_ice_ff = null;

	public File ef_psismsc = null;

	public File df_graphics = null;

	public File ef_img = null;

	public File ef_iidf = null;

	public File ef_ice_graphics = null;

	public File ef_launch_scws = null;

	public File ef_icon = null;

	public File df_phonebook = null;

	public File ef_pbr = null;

	public File ef_ext1 = null;

	public File ef_aas = null;

	public File ef_gas = null;

	public File ef_psc = null;

	public File ef_cc = null;

	public File ef_puid = null;

	public File ef_iap = null;

	public File ef_adn = null;

	public File ef_pbc = null;

	public File ef_anr = null;

	public File ef_puri = null;

	public File ef_email = null;

	public File ef_sne = null;

	public File ef_uid = null;

	public File ef_grp = null;

	public File ef_ccp1 = null;

	public File df_multimedia = null;

	public File ef_mml = null;

	public File ef_mmdf = null;

	public File df_mmss = null;

	public File ef_mlpl = null;

	public File ef_mspl = null;

	public File ef_mmssmode = null;

	public PE_TELECOM() {
		id = identifier;
	}

	public PE_TELECOM(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public PE_TELECOM(PEHeader telecom_header, BerObjectIdentifier templateID, File df_telecom, File ef_arr, File ef_rma, File ef_sume, File ef_ice_dn, File ef_ice_ff, File ef_psismsc, File df_graphics, File ef_img, File ef_iidf, File ef_ice_graphics, File ef_launch_scws, File ef_icon, File df_phonebook, File ef_pbr, File ef_ext1, File ef_aas, File ef_gas, File ef_psc, File ef_cc, File ef_puid, File ef_iap, File ef_adn, File ef_pbc, File ef_anr, File ef_puri, File ef_email, File ef_sne, File ef_uid, File ef_grp, File ef_ccp1, File df_multimedia, File ef_mml, File ef_mmdf, File df_mmss, File ef_mlpl, File ef_mspl, File ef_mmssmode) {
		id = identifier;
		this.telecom_header = telecom_header;
		this.templateID = templateID;
		this.df_telecom = df_telecom;
		this.ef_arr = ef_arr;
		this.ef_rma = ef_rma;
		this.ef_sume = ef_sume;
		this.ef_ice_dn = ef_ice_dn;
		this.ef_ice_ff = ef_ice_ff;
		this.ef_psismsc = ef_psismsc;
		this.df_graphics = df_graphics;
		this.ef_img = ef_img;
		this.ef_iidf = ef_iidf;
		this.ef_ice_graphics = ef_ice_graphics;
		this.ef_launch_scws = ef_launch_scws;
		this.ef_icon = ef_icon;
		this.df_phonebook = df_phonebook;
		this.ef_pbr = ef_pbr;
		this.ef_ext1 = ef_ext1;
		this.ef_aas = ef_aas;
		this.ef_gas = ef_gas;
		this.ef_psc = ef_psc;
		this.ef_cc = ef_cc;
		this.ef_puid = ef_puid;
		this.ef_iap = ef_iap;
		this.ef_adn = ef_adn;
		this.ef_pbc = ef_pbc;
		this.ef_anr = ef_anr;
		this.ef_puri = ef_puri;
		this.ef_email = ef_email;
		this.ef_sne = ef_sne;
		this.ef_uid = ef_uid;
		this.ef_grp = ef_grp;
		this.ef_ccp1 = ef_ccp1;
		this.df_multimedia = df_multimedia;
		this.ef_mml = ef_mml;
		this.ef_mmdf = ef_mmdf;
		this.df_mmss = df_mmss;
		this.ef_mlpl = ef_mlpl;
		this.ef_mspl = ef_mspl;
		this.ef_mmssmode = ef_mmssmode;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (ef_mmssmode != null) {
				codeLength += ef_mmssmode.encode(os, true);
			}
			
			if (ef_mspl != null) {
				codeLength += ef_mspl.encode(os, true);
			}
			
			if (ef_mlpl != null) {
				codeLength += ef_mlpl.encode(os, true);
			}
			
			if (df_mmss != null) {
				codeLength += df_mmss.encode(os, true);
			}
			
			if (ef_mmdf != null) {
				codeLength += ef_mmdf.encode(os, true);
			}
			
			if (ef_mml != null) {
				codeLength += ef_mml.encode(os, true);
			}
			
			if (df_multimedia != null) {
				codeLength += df_multimedia.encode(os, true);
			}
			
			if (ef_ccp1 != null) {
				codeLength += ef_ccp1.encode(os, true);
			}
			
			if (ef_grp != null) {
				codeLength += ef_grp.encode(os, true);
			}
			
			if (ef_uid != null) {
				codeLength += ef_uid.encode(os, true);
			}
			
			if (ef_sne != null) {
				codeLength += ef_sne.encode(os, true);
			}
			
			if (ef_email != null) {
				codeLength += ef_email.encode(os, true);
			}
			
			if (ef_puri != null) {
				codeLength += ef_puri.encode(os, true);
			}
			
			if (ef_anr != null) {
				codeLength += ef_anr.encode(os, true);
			}
			
			if (ef_pbc != null) {
				codeLength += ef_pbc.encode(os, true);
			}
			
			if (ef_adn != null) {
				codeLength += ef_adn.encode(os, true);
			}
			
			if (ef_iap != null) {
				codeLength += ef_iap.encode(os, true);
			}
			
			if (ef_puid != null) {
				codeLength += ef_puid.encode(os, true);
			}
			
			if (ef_cc != null) {
				codeLength += ef_cc.encode(os, true);
			}
			
			if (ef_psc != null) {
				codeLength += ef_psc.encode(os, true);
			}
			
			if (ef_gas != null) {
				codeLength += ef_gas.encode(os, true);
			}
			
			if (ef_aas != null) {
				codeLength += ef_aas.encode(os, true);
			}
			
			if (ef_ext1 != null) {
				codeLength += ef_ext1.encode(os, true);
			}
			
			if (ef_pbr != null) {
				codeLength += ef_pbr.encode(os, true);
			}
			
			if (df_phonebook != null) {
				codeLength += df_phonebook.encode(os, true);
			}
			
			if (ef_icon != null) {
				codeLength += ef_icon.encode(os, true);
			}
			
			if (ef_launch_scws != null) {
				codeLength += ef_launch_scws.encode(os, true);
			}
			
			if (ef_ice_graphics != null) {
				codeLength += ef_ice_graphics.encode(os, true);
			}
			
			if (ef_iidf != null) {
				codeLength += ef_iidf.encode(os, true);
			}
			
			if (ef_img != null) {
				codeLength += ef_img.encode(os, true);
			}
			
			if (df_graphics != null) {
				codeLength += df_graphics.encode(os, true);
			}
			
			if (ef_psismsc != null) {
				codeLength += ef_psismsc.encode(os, true);
			}
			
			if (ef_ice_ff != null) {
				codeLength += ef_ice_ff.encode(os, true);
			}
			
			if (ef_ice_dn != null) {
				codeLength += ef_ice_dn.encode(os, true);
			}
			
			if (ef_sume != null) {
				codeLength += ef_sume.encode(os, true);
			}
			
			if (ef_rma != null) {
				codeLength += ef_rma.encode(os, true);
			}
			
			if (ef_arr != null) {
				codeLength += ef_arr.encode(os, true);
			}
			
			codeLength += df_telecom.encode(os, true);
			
			codeLength += templateID.encode(os, true);
			
			codeLength += telecom_header.encode(os, true);
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		codeLength += length.val;

		if (length.val == -1) {
			subCodeLength += berIdentifier.decode(is);

			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(PEHeader.identifier)) {
				telecom_header = new PEHeader();
				subCodeLength += telecom_header.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerObjectIdentifier.identifier)) {
				templateID = new BerObjectIdentifier();
				subCodeLength += templateID.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				df_telecom = new File();
				subCodeLength += df_telecom.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_arr = new File();
				subCodeLength += ef_arr.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_rma = new File();
				subCodeLength += ef_rma.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_sume = new File();
				subCodeLength += ef_sume.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ice_dn = new File();
				subCodeLength += ef_ice_dn.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ice_ff = new File();
				subCodeLength += ef_ice_ff.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_psismsc = new File();
				subCodeLength += ef_psismsc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				df_graphics = new File();
				subCodeLength += df_graphics.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_img = new File();
				subCodeLength += ef_img.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_iidf = new File();
				subCodeLength += ef_iidf.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ice_graphics = new File();
				subCodeLength += ef_ice_graphics.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_launch_scws = new File();
				subCodeLength += ef_launch_scws.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_icon = new File();
				subCodeLength += ef_icon.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				df_phonebook = new File();
				subCodeLength += df_phonebook.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_pbr = new File();
				subCodeLength += ef_pbr.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ext1 = new File();
				subCodeLength += ef_ext1.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_aas = new File();
				subCodeLength += ef_aas.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_gas = new File();
				subCodeLength += ef_gas.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_psc = new File();
				subCodeLength += ef_psc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_cc = new File();
				subCodeLength += ef_cc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_puid = new File();
				subCodeLength += ef_puid.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_iap = new File();
				subCodeLength += ef_iap.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_adn = new File();
				subCodeLength += ef_adn.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_pbc = new File();
				subCodeLength += ef_pbc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_anr = new File();
				subCodeLength += ef_anr.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_puri = new File();
				subCodeLength += ef_puri.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_email = new File();
				subCodeLength += ef_email.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_sne = new File();
				subCodeLength += ef_sne.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_uid = new File();
				subCodeLength += ef_uid.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_grp = new File();
				subCodeLength += ef_grp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ccp1 = new File();
				subCodeLength += ef_ccp1.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				df_multimedia = new File();
				subCodeLength += df_multimedia.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mml = new File();
				subCodeLength += ef_mml.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mmdf = new File();
				subCodeLength += ef_mmdf.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				df_mmss = new File();
				subCodeLength += df_mmss.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mlpl = new File();
				subCodeLength += ef_mlpl.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mspl = new File();
				subCodeLength += ef_mspl.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_mmssmode = new File();
				subCodeLength += ef_mmssmode.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			int nextByte = is.read();
			if (berIdentifier.tagNumber != 0 || berIdentifier.identifierClass != 0 || berIdentifier.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(PEHeader.identifier)) {
			telecom_header = new PEHeader();
			subCodeLength += telecom_header.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerObjectIdentifier.identifier)) {
			templateID = new BerObjectIdentifier();
			subCodeLength += templateID.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(File.identifier)) {
			df_telecom = new File();
			subCodeLength += df_telecom.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_arr = new File();
			subCodeLength += ef_arr.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_rma = new File();
			subCodeLength += ef_rma.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_sume = new File();
			subCodeLength += ef_sume.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ice_dn = new File();
			subCodeLength += ef_ice_dn.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ice_ff = new File();
			subCodeLength += ef_ice_ff.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_psismsc = new File();
			subCodeLength += ef_psismsc.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			df_graphics = new File();
			subCodeLength += df_graphics.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_img = new File();
			subCodeLength += ef_img.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_iidf = new File();
			subCodeLength += ef_iidf.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ice_graphics = new File();
			subCodeLength += ef_ice_graphics.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_launch_scws = new File();
			subCodeLength += ef_launch_scws.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_icon = new File();
			subCodeLength += ef_icon.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			df_phonebook = new File();
			subCodeLength += df_phonebook.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_pbr = new File();
			subCodeLength += ef_pbr.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ext1 = new File();
			subCodeLength += ef_ext1.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_aas = new File();
			subCodeLength += ef_aas.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_gas = new File();
			subCodeLength += ef_gas.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_psc = new File();
			subCodeLength += ef_psc.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_cc = new File();
			subCodeLength += ef_cc.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_puid = new File();
			subCodeLength += ef_puid.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_iap = new File();
			subCodeLength += ef_iap.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_adn = new File();
			subCodeLength += ef_adn.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_pbc = new File();
			subCodeLength += ef_pbc.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_anr = new File();
			subCodeLength += ef_anr.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_puri = new File();
			subCodeLength += ef_puri.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_email = new File();
			subCodeLength += ef_email.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_sne = new File();
			subCodeLength += ef_sne.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_uid = new File();
			subCodeLength += ef_uid.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_grp = new File();
			subCodeLength += ef_grp.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ccp1 = new File();
			subCodeLength += ef_ccp1.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			df_multimedia = new File();
			subCodeLength += df_multimedia.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mml = new File();
			subCodeLength += ef_mml.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mmdf = new File();
			subCodeLength += ef_mmdf.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			df_mmss = new File();
			subCodeLength += df_mmss.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mlpl = new File();
			subCodeLength += ef_mlpl.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mspl = new File();
			subCodeLength += ef_mspl.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_mmssmode = new File();
			subCodeLength += ef_mmssmode.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + length.val + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("telecom_header: ").append(telecom_header);
		
		sb.append(", ");
		sb.append("templateID: ").append(templateID);
		
		sb.append(", ");
		sb.append("df_telecom: ").append(df_telecom);
		
		if (ef_arr != null) {
			sb.append(", ");
			sb.append("ef_arr: ").append(ef_arr);
		}
		
		if (ef_rma != null) {
			sb.append(", ");
			sb.append("ef_rma: ").append(ef_rma);
		}
		
		if (ef_sume != null) {
			sb.append(", ");
			sb.append("ef_sume: ").append(ef_sume);
		}
		
		if (ef_ice_dn != null) {
			sb.append(", ");
			sb.append("ef_ice_dn: ").append(ef_ice_dn);
		}
		
		if (ef_ice_ff != null) {
			sb.append(", ");
			sb.append("ef_ice_ff: ").append(ef_ice_ff);
		}
		
		if (ef_psismsc != null) {
			sb.append(", ");
			sb.append("ef_psismsc: ").append(ef_psismsc);
		}
		
		if (df_graphics != null) {
			sb.append(", ");
			sb.append("df_graphics: ").append(df_graphics);
		}
		
		if (ef_img != null) {
			sb.append(", ");
			sb.append("ef_img: ").append(ef_img);
		}
		
		if (ef_iidf != null) {
			sb.append(", ");
			sb.append("ef_iidf: ").append(ef_iidf);
		}
		
		if (ef_ice_graphics != null) {
			sb.append(", ");
			sb.append("ef_ice_graphics: ").append(ef_ice_graphics);
		}
		
		if (ef_launch_scws != null) {
			sb.append(", ");
			sb.append("ef_launch_scws: ").append(ef_launch_scws);
		}
		
		if (ef_icon != null) {
			sb.append(", ");
			sb.append("ef_icon: ").append(ef_icon);
		}
		
		if (df_phonebook != null) {
			sb.append(", ");
			sb.append("df_phonebook: ").append(df_phonebook);
		}
		
		if (ef_pbr != null) {
			sb.append(", ");
			sb.append("ef_pbr: ").append(ef_pbr);
		}
		
		if (ef_ext1 != null) {
			sb.append(", ");
			sb.append("ef_ext1: ").append(ef_ext1);
		}
		
		if (ef_aas != null) {
			sb.append(", ");
			sb.append("ef_aas: ").append(ef_aas);
		}
		
		if (ef_gas != null) {
			sb.append(", ");
			sb.append("ef_gas: ").append(ef_gas);
		}
		
		if (ef_psc != null) {
			sb.append(", ");
			sb.append("ef_psc: ").append(ef_psc);
		}
		
		if (ef_cc != null) {
			sb.append(", ");
			sb.append("ef_cc: ").append(ef_cc);
		}
		
		if (ef_puid != null) {
			sb.append(", ");
			sb.append("ef_puid: ").append(ef_puid);
		}
		
		if (ef_iap != null) {
			sb.append(", ");
			sb.append("ef_iap: ").append(ef_iap);
		}
		
		if (ef_adn != null) {
			sb.append(", ");
			sb.append("ef_adn: ").append(ef_adn);
		}
		
		if (ef_pbc != null) {
			sb.append(", ");
			sb.append("ef_pbc: ").append(ef_pbc);
		}
		
		if (ef_anr != null) {
			sb.append(", ");
			sb.append("ef_anr: ").append(ef_anr);
		}
		
		if (ef_puri != null) {
			sb.append(", ");
			sb.append("ef_puri: ").append(ef_puri);
		}
		
		if (ef_email != null) {
			sb.append(", ");
			sb.append("ef_email: ").append(ef_email);
		}
		
		if (ef_sne != null) {
			sb.append(", ");
			sb.append("ef_sne: ").append(ef_sne);
		}
		
		if (ef_uid != null) {
			sb.append(", ");
			sb.append("ef_uid: ").append(ef_uid);
		}
		
		if (ef_grp != null) {
			sb.append(", ");
			sb.append("ef_grp: ").append(ef_grp);
		}
		
		if (ef_ccp1 != null) {
			sb.append(", ");
			sb.append("ef_ccp1: ").append(ef_ccp1);
		}
		
		if (df_multimedia != null) {
			sb.append(", ");
			sb.append("df_multimedia: ").append(df_multimedia);
		}
		
		if (ef_mml != null) {
			sb.append(", ");
			sb.append("ef_mml: ").append(ef_mml);
		}
		
		if (ef_mmdf != null) {
			sb.append(", ");
			sb.append("ef_mmdf: ").append(ef_mmdf);
		}
		
		if (df_mmss != null) {
			sb.append(", ");
			sb.append("df_mmss: ").append(df_mmss);
		}
		
		if (ef_mlpl != null) {
			sb.append(", ");
			sb.append("ef_mlpl: ").append(ef_mlpl);
		}
		
		if (ef_mspl != null) {
			sb.append(", ");
			sb.append("ef_mspl: ").append(ef_mspl);
		}
		
		if (ef_mmssmode != null) {
			sb.append(", ");
			sb.append("ef_mmssmode: ").append(ef_mmssmode);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

