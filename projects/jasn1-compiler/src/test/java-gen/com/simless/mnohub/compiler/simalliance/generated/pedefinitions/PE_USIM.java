/**
 * This class file was automatically generated by jASN1 v1.5.0 (http://www.openmuc.org)
 */

package com.simless.mnohub.compiler.simalliance.generated.pedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PE_USIM {

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public PEHeader usim_header = null;

	public BerObjectIdentifier templateID = null;

	public File adf_usim = null;

	public File ef_imsi = null;

	public File ef_arr = null;

	public File ef_keys = null;

	public File ef_keysPS = null;

	public File ef_hpplmn = null;

	public File ef_ust = null;

	public File ef_fdn = null;

	public File ef_sms = null;

	public File ef_smsp = null;

	public File ef_smss = null;

	public File ef_spn = null;

	public File ef_est = null;

	public File ef_start_hfn = null;

	public File ef_threshold = null;

	public File ef_psloci = null;

	public File ef_acc = null;

	public File ef_fplmn = null;

	public File ef_loci = null;

	public File ef_ad = null;

	public File ef_ecc = null;

	public File ef_netpar = null;

	public File ef_epsloci = null;

	public File ef_epsnsc = null;

	public PE_USIM() {
		id = identifier;
	}

	public PE_USIM(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public PE_USIM(PEHeader usim_header, BerObjectIdentifier templateID, File adf_usim, File ef_imsi, File ef_arr, File ef_keys, File ef_keysPS, File ef_hpplmn, File ef_ust, File ef_fdn, File ef_sms, File ef_smsp, File ef_smss, File ef_spn, File ef_est, File ef_start_hfn, File ef_threshold, File ef_psloci, File ef_acc, File ef_fplmn, File ef_loci, File ef_ad, File ef_ecc, File ef_netpar, File ef_epsloci, File ef_epsnsc) {
		id = identifier;
		this.usim_header = usim_header;
		this.templateID = templateID;
		this.adf_usim = adf_usim;
		this.ef_imsi = ef_imsi;
		this.ef_arr = ef_arr;
		this.ef_keys = ef_keys;
		this.ef_keysPS = ef_keysPS;
		this.ef_hpplmn = ef_hpplmn;
		this.ef_ust = ef_ust;
		this.ef_fdn = ef_fdn;
		this.ef_sms = ef_sms;
		this.ef_smsp = ef_smsp;
		this.ef_smss = ef_smss;
		this.ef_spn = ef_spn;
		this.ef_est = ef_est;
		this.ef_start_hfn = ef_start_hfn;
		this.ef_threshold = ef_threshold;
		this.ef_psloci = ef_psloci;
		this.ef_acc = ef_acc;
		this.ef_fplmn = ef_fplmn;
		this.ef_loci = ef_loci;
		this.ef_ad = ef_ad;
		this.ef_ecc = ef_ecc;
		this.ef_netpar = ef_netpar;
		this.ef_epsloci = ef_epsloci;
		this.ef_epsnsc = ef_epsnsc;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (ef_epsnsc != null) {
				codeLength += ef_epsnsc.encode(os, true);
			}
			
			if (ef_epsloci != null) {
				codeLength += ef_epsloci.encode(os, true);
			}
			
			if (ef_netpar != null) {
				codeLength += ef_netpar.encode(os, true);
			}
			
			codeLength += ef_ecc.encode(os, true);
			
			if (ef_ad != null) {
				codeLength += ef_ad.encode(os, true);
			}
			
			if (ef_loci != null) {
				codeLength += ef_loci.encode(os, true);
			}
			
			if (ef_fplmn != null) {
				codeLength += ef_fplmn.encode(os, true);
			}
			
			codeLength += ef_acc.encode(os, true);
			
			if (ef_psloci != null) {
				codeLength += ef_psloci.encode(os, true);
			}
			
			if (ef_threshold != null) {
				codeLength += ef_threshold.encode(os, true);
			}
			
			if (ef_start_hfn != null) {
				codeLength += ef_start_hfn.encode(os, true);
			}
			
			codeLength += ef_est.encode(os, true);
			
			codeLength += ef_spn.encode(os, true);
			
			if (ef_smss != null) {
				codeLength += ef_smss.encode(os, true);
			}
			
			if (ef_smsp != null) {
				codeLength += ef_smsp.encode(os, true);
			}
			
			if (ef_sms != null) {
				codeLength += ef_sms.encode(os, true);
			}
			
			if (ef_fdn != null) {
				codeLength += ef_fdn.encode(os, true);
			}
			
			codeLength += ef_ust.encode(os, true);
			
			if (ef_hpplmn != null) {
				codeLength += ef_hpplmn.encode(os, true);
			}
			
			if (ef_keysPS != null) {
				codeLength += ef_keysPS.encode(os, true);
			}
			
			if (ef_keys != null) {
				codeLength += ef_keys.encode(os, true);
			}
			
			codeLength += ef_arr.encode(os, true);
			
			codeLength += ef_imsi.encode(os, true);
			
			codeLength += adf_usim.encode(os, true);
			
			codeLength += templateID.encode(os, true);
			
			codeLength += usim_header.encode(os, true);
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		codeLength += length.val;

		if (length.val == -1) {
			subCodeLength += berIdentifier.decode(is);

			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(PEHeader.identifier)) {
				usim_header = new PEHeader();
				subCodeLength += usim_header.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(BerObjectIdentifier.identifier)) {
				templateID = new BerObjectIdentifier();
				subCodeLength += templateID.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				adf_usim = new File();
				subCodeLength += adf_usim.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_imsi = new File();
				subCodeLength += ef_imsi.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_arr = new File();
				subCodeLength += ef_arr.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_keys = new File();
				subCodeLength += ef_keys.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_keysPS = new File();
				subCodeLength += ef_keysPS.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_hpplmn = new File();
				subCodeLength += ef_hpplmn.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ust = new File();
				subCodeLength += ef_ust.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_fdn = new File();
				subCodeLength += ef_fdn.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_sms = new File();
				subCodeLength += ef_sms.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_smsp = new File();
				subCodeLength += ef_smsp.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_smss = new File();
				subCodeLength += ef_smss.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_spn = new File();
				subCodeLength += ef_spn.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_est = new File();
				subCodeLength += ef_est.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_start_hfn = new File();
				subCodeLength += ef_start_hfn.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_threshold = new File();
				subCodeLength += ef_threshold.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_psloci = new File();
				subCodeLength += ef_psloci.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_acc = new File();
				subCodeLength += ef_acc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_fplmn = new File();
				subCodeLength += ef_fplmn.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_loci = new File();
				subCodeLength += ef_loci.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ad = new File();
				subCodeLength += ef_ad.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_ecc = new File();
				subCodeLength += ef_ecc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match required sequence element identifer.");
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_netpar = new File();
				subCodeLength += ef_netpar.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_epsloci = new File();
				subCodeLength += ef_epsloci.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			if (berIdentifier.tagNumber == 0 && berIdentifier.identifierClass == 0 && berIdentifier.primitive == 0) {
				int nextByte = is.read();
				if (nextByte != 0) {
					if (nextByte == -1) {
						throw new EOFException("Unexpected end of input stream.");
					}
					throw new IOException("Decoded sequence has wrong end of contents octets");
				}
				codeLength += subCodeLength + 1;
				return codeLength;
			}
			if (berIdentifier.equals(File.identifier)) {
				ef_epsnsc = new File();
				subCodeLength += ef_epsnsc.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			int nextByte = is.read();
			if (berIdentifier.tagNumber != 0 || berIdentifier.identifierClass != 0 || berIdentifier.primitive != 0
			|| nextByte != 0) {
				if (nextByte == -1) {
					throw new EOFException("Unexpected end of input stream.");
				}
				throw new IOException("Decoded sequence has wrong end of contents octets");
			}
			codeLength += subCodeLength + 1;
			return codeLength;
		}

		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(PEHeader.identifier)) {
			usim_header = new PEHeader();
			subCodeLength += usim_header.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(BerObjectIdentifier.identifier)) {
			templateID = new BerObjectIdentifier();
			subCodeLength += templateID.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(File.identifier)) {
			adf_usim = new File();
			subCodeLength += adf_usim.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_imsi = new File();
			subCodeLength += ef_imsi.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_arr = new File();
			subCodeLength += ef_arr.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_keys = new File();
			subCodeLength += ef_keys.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_keysPS = new File();
			subCodeLength += ef_keysPS.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_hpplmn = new File();
			subCodeLength += ef_hpplmn.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ust = new File();
			subCodeLength += ef_ust.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_fdn = new File();
			subCodeLength += ef_fdn.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_sms = new File();
			subCodeLength += ef_sms.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_smsp = new File();
			subCodeLength += ef_smsp.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_smss = new File();
			subCodeLength += ef_smss.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_spn = new File();
			subCodeLength += ef_spn.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_est = new File();
			subCodeLength += ef_est.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_start_hfn = new File();
			subCodeLength += ef_start_hfn.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_threshold = new File();
			subCodeLength += ef_threshold.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_psloci = new File();
			subCodeLength += ef_psloci.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_acc = new File();
			subCodeLength += ef_acc.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_fplmn = new File();
			subCodeLength += ef_fplmn.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_loci = new File();
			subCodeLength += ef_loci.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ad = new File();
			subCodeLength += ef_ad.decode(is, false);
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_ecc = new File();
			subCodeLength += ef_ecc.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			throw new IOException("Identifier does not match the mandatory sequence element identifer.");
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_netpar = new File();
			subCodeLength += ef_netpar.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_epsloci = new File();
			subCodeLength += ef_epsloci.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(File.identifier)) {
			ef_epsnsc = new File();
			subCodeLength += ef_epsnsc.decode(is, false);
			if (subCodeLength == length.val) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + length.val + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		sb.append("usim_header: ").append(usim_header);
		
		sb.append(", ");
		sb.append("templateID: ").append(templateID);
		
		sb.append(", ");
		sb.append("adf_usim: ").append(adf_usim);
		
		sb.append(", ");
		sb.append("ef_imsi: ").append(ef_imsi);
		
		sb.append(", ");
		sb.append("ef_arr: ").append(ef_arr);
		
		if (ef_keys != null) {
			sb.append(", ");
			sb.append("ef_keys: ").append(ef_keys);
		}
		
		if (ef_keysPS != null) {
			sb.append(", ");
			sb.append("ef_keysPS: ").append(ef_keysPS);
		}
		
		if (ef_hpplmn != null) {
			sb.append(", ");
			sb.append("ef_hpplmn: ").append(ef_hpplmn);
		}
		
		sb.append(", ");
		sb.append("ef_ust: ").append(ef_ust);
		
		if (ef_fdn != null) {
			sb.append(", ");
			sb.append("ef_fdn: ").append(ef_fdn);
		}
		
		if (ef_sms != null) {
			sb.append(", ");
			sb.append("ef_sms: ").append(ef_sms);
		}
		
		if (ef_smsp != null) {
			sb.append(", ");
			sb.append("ef_smsp: ").append(ef_smsp);
		}
		
		if (ef_smss != null) {
			sb.append(", ");
			sb.append("ef_smss: ").append(ef_smss);
		}
		
		sb.append(", ");
		sb.append("ef_spn: ").append(ef_spn);
		
		sb.append(", ");
		sb.append("ef_est: ").append(ef_est);
		
		if (ef_start_hfn != null) {
			sb.append(", ");
			sb.append("ef_start_hfn: ").append(ef_start_hfn);
		}
		
		if (ef_threshold != null) {
			sb.append(", ");
			sb.append("ef_threshold: ").append(ef_threshold);
		}
		
		if (ef_psloci != null) {
			sb.append(", ");
			sb.append("ef_psloci: ").append(ef_psloci);
		}
		
		sb.append(", ");
		sb.append("ef_acc: ").append(ef_acc);
		
		if (ef_fplmn != null) {
			sb.append(", ");
			sb.append("ef_fplmn: ").append(ef_fplmn);
		}
		
		if (ef_loci != null) {
			sb.append(", ");
			sb.append("ef_loci: ").append(ef_loci);
		}
		
		if (ef_ad != null) {
			sb.append(", ");
			sb.append("ef_ad: ").append(ef_ad);
		}
		
		sb.append(", ");
		sb.append("ef_ecc: ").append(ef_ecc);
		
		if (ef_netpar != null) {
			sb.append(", ");
			sb.append("ef_netpar: ").append(ef_netpar);
		}
		
		if (ef_epsloci != null) {
			sb.append(", ");
			sb.append("ef_epsloci: ").append(ef_epsloci);
		}
		
		if (ef_epsnsc != null) {
			sb.append(", ");
			sb.append("ef_epsnsc: ").append(ef_epsnsc);
		}
		
		sb.append("}");
		return sb.toString();
	}

}

