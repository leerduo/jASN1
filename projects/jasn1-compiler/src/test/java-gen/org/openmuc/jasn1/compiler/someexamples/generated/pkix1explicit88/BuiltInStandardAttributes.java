/**
 * This class file was automatically generated by jASN1 v1.5.1-SNAPSHOT (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.someexamples.generated.pkix1explicit88;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import org.openmuc.jasn1.compiler.someexamples.generated.pkix1implicit88.*;
import org.openmuc.jasn1.compiler.someexamples.generated.rspdefinitions.*;

public class BuiltInStandardAttributes {

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public CountryName countryName = null;

	public AdministrationDomainName administrationDomainName = null;

	public NetworkAddress networkAddress = null;

	public TerminalIdentifier terminalIdentifier = null;

	public PrivateDomainName privateDomainName = null;

	public OrganizationName organizationName = null;

	public NumericUserIdentifier numericUserIdentifier = null;

	public PersonalName personalName = null;

	public OrganizationalUnitNames organizationalUnitNames = null;

	public BuiltInStandardAttributes() {
		id = identifier;
	}

	public BuiltInStandardAttributes(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public BuiltInStandardAttributes(CountryName countryName, AdministrationDomainName administrationDomainName, NetworkAddress networkAddress, TerminalIdentifier terminalIdentifier, PrivateDomainName privateDomainName, OrganizationName organizationName, NumericUserIdentifier numericUserIdentifier, PersonalName personalName, OrganizationalUnitNames organizationalUnitNames) {
		id = identifier;
		this.countryName = countryName;
		this.administrationDomainName = administrationDomainName;
		this.networkAddress = networkAddress;
		this.terminalIdentifier = terminalIdentifier;
		this.privateDomainName = privateDomainName;
		this.organizationName = organizationName;
		this.numericUserIdentifier = numericUserIdentifier;
		this.personalName = personalName;
		this.organizationalUnitNames = organizationalUnitNames;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			int sublength;

			if (organizationalUnitNames != null) {
				codeLength += organizationalUnitNames.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
				os.write(0xa6);
				codeLength += 1;
			}
			
			if (personalName != null) {
				codeLength += personalName.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
				os.write(0xa5);
				codeLength += 1;
			}
			
			if (numericUserIdentifier != null) {
				codeLength += numericUserIdentifier.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				os.write(0x84);
				codeLength += 1;
			}
			
			if (organizationName != null) {
				codeLength += organizationName.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				os.write(0x83);
				codeLength += 1;
			}
			
			if (privateDomainName != null) {
				sublength = privateDomainName.encode(os, true);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(os, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				os.write(0xa2);
				codeLength += 1;
			}
			
			if (terminalIdentifier != null) {
				codeLength += terminalIdentifier.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				os.write(0x81);
				codeLength += 1;
			}
			
			if (networkAddress != null) {
				codeLength += networkAddress.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				os.write(0x80);
				codeLength += 1;
			}
			
			if (administrationDomainName != null) {
				codeLength += administrationDomainName.encode(os, true);
			}
			
			if (countryName != null) {
				codeLength += countryName.encode(os, true);
			}
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berIdentifier.decode(is);
		countryName = new CountryName();
		int choiceDecodeLength = countryName.decode(is, berIdentifier);
		if (choiceDecodeLength != 0) {
			subCodeLength += choiceDecodeLength;
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			countryName = null;
		}
		
		administrationDomainName = new AdministrationDomainName();
		choiceDecodeLength = administrationDomainName.decode(is, berIdentifier);
		if (choiceDecodeLength != 0) {
			subCodeLength += choiceDecodeLength;
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		else {
			administrationDomainName = null;
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
			networkAddress = new NetworkAddress();
			subCodeLength += networkAddress.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 1)) {
			terminalIdentifier = new TerminalIdentifier();
			subCodeLength += terminalIdentifier.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 2)) {
			subCodeLength += length.decode(is);
			privateDomainName = new PrivateDomainName();
			subCodeLength += privateDomainName.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 3)) {
			organizationName = new OrganizationName();
			subCodeLength += organizationName.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 4)) {
			numericUserIdentifier = new NumericUserIdentifier();
			subCodeLength += numericUserIdentifier.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 5)) {
			personalName = new PersonalName();
			subCodeLength += personalName.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 6)) {
			organizationalUnitNames = new OrganizationalUnitNames();
			subCodeLength += organizationalUnitNames.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		boolean firstSelectedElement = true;
		if (countryName != null) {
			sb.append("countryName: ").append(countryName);
			firstSelectedElement = false;
		}
		
		if (administrationDomainName != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("administrationDomainName: ").append(administrationDomainName);
			firstSelectedElement = false;
		}
		
		if (networkAddress != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("networkAddress: ").append(networkAddress);
			firstSelectedElement = false;
		}
		
		if (terminalIdentifier != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("terminalIdentifier: ").append(terminalIdentifier);
			firstSelectedElement = false;
		}
		
		if (privateDomainName != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("privateDomainName: ").append(privateDomainName);
			firstSelectedElement = false;
		}
		
		if (organizationName != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("organizationName: ").append(organizationName);
			firstSelectedElement = false;
		}
		
		if (numericUserIdentifier != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("numericUserIdentifier: ").append(numericUserIdentifier);
			firstSelectedElement = false;
		}
		
		if (personalName != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("personalName: ").append(personalName);
			firstSelectedElement = false;
		}
		
		if (organizationalUnitNames != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("organizationalUnitNames: ").append(organizationalUnitNames);
			firstSelectedElement = false;
		}
		
		sb.append("}");
		return sb.toString();
	}

}

