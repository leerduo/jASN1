/**
 * This class file was automatically generated by jASN1 v1.6.1-SNAPSHOT (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.rspdefinitions.generated.pkix1implicit88;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import org.openmuc.jasn1.compiler.rspdefinitions.generated.teletexdomaindefinedattributes.*;
import org.openmuc.jasn1.compiler.rspdefinitions.generated.rspdefinitions.*;
import org.openmuc.jasn1.compiler.rspdefinitions.generated.pkix1explicit88.*;

public class AuthorityKeyIdentifier {

	public static final BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public KeyIdentifier keyIdentifier = null;

	public GeneralNames authorityCertIssuer = null;

	public CertificateSerialNumber authorityCertSerialNumber = null;

	public AuthorityKeyIdentifier() {
		id = identifier;
	}

	public AuthorityKeyIdentifier(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public AuthorityKeyIdentifier(KeyIdentifier keyIdentifier, GeneralNames authorityCertIssuer, CertificateSerialNumber authorityCertSerialNumber) {
		id = identifier;
		this.keyIdentifier = keyIdentifier;
		this.authorityCertIssuer = authorityCertIssuer;
		this.authorityCertSerialNumber = authorityCertSerialNumber;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			if (authorityCertSerialNumber != null) {
				codeLength += authorityCertSerialNumber.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				os.write(0x82);
				codeLength += 1;
			}
			
			if (authorityCertIssuer != null) {
				codeLength += authorityCertIssuer.encode(os, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				os.write(0xa1);
				codeLength += 1;
			}
			
			if (keyIdentifier != null) {
				codeLength += keyIdentifier.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				os.write(0x80);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(os, codeLength);
		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerIdentifier berIdentifier = new BerIdentifier();

		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berIdentifier.decode(is);
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 0)) {
			keyIdentifier = new KeyIdentifier();
			subCodeLength += keyIdentifier.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.CONSTRUCTED, 1)) {
			authorityCertIssuer = new GeneralNames();
			subCodeLength += authorityCertIssuer.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berIdentifier.decode(is);
		}
		
		if (berIdentifier.equals(BerIdentifier.CONTEXT_CLASS, BerIdentifier.PRIMITIVE, 2)) {
			authorityCertSerialNumber = new CertificateSerialNumber();
			subCodeLength += authorityCertSerialNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE{");
		boolean firstSelectedElement = true;
		if (keyIdentifier != null) {
			sb.append("keyIdentifier: ").append(keyIdentifier);
			firstSelectedElement = false;
		}
		
		if (authorityCertIssuer != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("authorityCertIssuer: ").append(authorityCertIssuer);
			firstSelectedElement = false;
		}
		
		if (authorityCertSerialNumber != null) {
			if (!firstSelectedElement) {
				sb.append(", ");
			}
			sb.append("authorityCertSerialNumber: ").append(authorityCertSerialNumber);
			firstSelectedElement = false;
		}
		
		sb.append("}");
		return sb.toString();
	}

}

