/**
 * This class file was automatically generated by jASN1 v1.5.0 (http://www.openmuc.org)
 */

package org.openmuc.jasn1.compiler.presentation.generated.iso8823_presentation;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class Context_list {

	public static class SubSeq {

		public static class SubSeqOf_transfer_syntax_name_list {

			public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
			protected BerIdentifier id;

			public byte[] code = null;
			public List<Transfer_syntax_name> seqOf = null;

			public SubSeqOf_transfer_syntax_name_list() {
				id = identifier;
				seqOf = new ArrayList<Transfer_syntax_name>();
			}

			public SubSeqOf_transfer_syntax_name_list(byte[] code) {
				id = identifier;
				this.code = code;
			}

			public SubSeqOf_transfer_syntax_name_list(List<Transfer_syntax_name> seqOf) {
				id = identifier;
				this.seqOf = seqOf;
			}

			public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {
				int codeLength;

				if (code != null) {
					codeLength = code.length;
					for (int i = code.length - 1; i >= 0; i--) {
						os.write(code[i]);
					}
				}
				else {
					codeLength = 0;
					for (int i = (seqOf.size() - 1); i >= 0; i--) {
						codeLength += seqOf.get(i).encode(os, true);
					}

					codeLength += BerLength.encodeLength(os, codeLength);

				}

				if (explicit) {
					codeLength += id.encode(os);
				}

				return codeLength;
			}

			public int decode(InputStream is, boolean explicit) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				if (explicit) {
					codeLength += id.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				while (subCodeLength < length.val) {
					Transfer_syntax_name element = new Transfer_syntax_name();
					subCodeLength += element.decode(is, true);
					seqOf.add(element);
				}
				if (subCodeLength != length.val) {
					throw new IOException("Decoded SequenceOf or SetOf has wrong length tag");

				}
				codeLength += subCodeLength;

				return codeLength;
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
				encode(os, false);
				code = os.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder("SEQUENCE OF{");

				if (seqOf == null) {
					sb.append("null");
				}
				else {
					Iterator<Transfer_syntax_name> it = seqOf.iterator();
					if (it.hasNext()) {
						sb.append(it.next());
						while (it.hasNext()) {
							sb.append(", ").append(it.next());
						}
					}
				}

				sb.append("}");

				return sb.toString();
			}

		}

		public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
		protected BerIdentifier id;

		public byte[] code = null;
		public Presentation_context_identifier presentation_context_identifier = null;

		public Abstract_syntax_name abstract_syntax_name = null;

		public SubSeqOf_transfer_syntax_name_list transfer_syntax_name_list = null;

		public SubSeq() {
			id = identifier;
		}

		public SubSeq(byte[] code) {
			id = identifier;
			this.code = code;
		}

		public SubSeq(Presentation_context_identifier presentation_context_identifier, Abstract_syntax_name abstract_syntax_name, SubSeqOf_transfer_syntax_name_list transfer_syntax_name_list) {
			id = identifier;
			this.presentation_context_identifier = presentation_context_identifier;
			this.abstract_syntax_name = abstract_syntax_name;
			this.transfer_syntax_name_list = transfer_syntax_name_list;
		}

		public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {

			int codeLength;

			if (code != null) {
				codeLength = code.length;
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
			}
			else {
				codeLength = 0;
				codeLength += transfer_syntax_name_list.encode(os, true);
				
				codeLength += abstract_syntax_name.encode(os, true);
				
				codeLength += presentation_context_identifier.encode(os, true);
				
				codeLength += BerLength.encodeLength(os, codeLength);
			}

			if (explicit) {
				codeLength += id.encode(os);
			}

			return codeLength;

		}

		public int decode(InputStream is, boolean explicit) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerIdentifier berIdentifier = new BerIdentifier();

			if (explicit) {
				codeLength += id.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			codeLength += length.val;

			subCodeLength += berIdentifier.decode(is);
			if (berIdentifier.equals(Presentation_context_identifier.identifier)) {
				presentation_context_identifier = new Presentation_context_identifier();
				subCodeLength += presentation_context_identifier.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match the mandatory sequence element identifer.");
			}
			
			if (berIdentifier.equals(Abstract_syntax_name.identifier)) {
				abstract_syntax_name = new Abstract_syntax_name();
				subCodeLength += abstract_syntax_name.decode(is, false);
				subCodeLength += berIdentifier.decode(is);
			}
			else {
				throw new IOException("Identifier does not match the mandatory sequence element identifer.");
			}
			
			if (berIdentifier.equals(SubSeqOf_transfer_syntax_name_list.identifier)) {
				transfer_syntax_name_list = new SubSeqOf_transfer_syntax_name_list();
				subCodeLength += transfer_syntax_name_list.decode(is, false);
				if (subCodeLength == length.val) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + length.val + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("SEQUENCE{");
			sb.append("presentation_context_identifier: ").append(presentation_context_identifier);
			
			sb.append(", ");
			sb.append("abstract_syntax_name: ").append(abstract_syntax_name);
			
			sb.append(", ");
			sb.append("transfer_syntax_name_list: ").append(transfer_syntax_name_list);
			
			sb.append("}");
			return sb.toString();
		}

	}

	public final static BerIdentifier identifier = new BerIdentifier(BerIdentifier.UNIVERSAL_CLASS, BerIdentifier.CONSTRUCTED, 16);
	protected BerIdentifier id;

	public byte[] code = null;
	public List<SubSeq> seqOf = null;

	public Context_list() {
		id = identifier;
		seqOf = new ArrayList<SubSeq>();
	}

	public Context_list(byte[] code) {
		id = identifier;
		this.code = code;
	}

	public Context_list(List<SubSeq> seqOf) {
		id = identifier;
		this.seqOf = seqOf;
	}

	public int encode(BerByteArrayOutputStream os, boolean explicit) throws IOException {
		int codeLength;

		if (code != null) {
			codeLength = code.length;
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
		}
		else {
			codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

		}

		if (explicit) {
			codeLength += id.encode(os);
		}

		return codeLength;
	}

	public int decode(InputStream is, boolean explicit) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		if (explicit) {
			codeLength += id.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		while (subCodeLength < length.val) {
			SubSeq element = new SubSeq();
			subCodeLength += element.decode(is, true);
			seqOf.add(element);
		}
		if (subCodeLength != length.val) {
			throw new IOException("Decoded SequenceOf or SetOf has wrong length tag");

		}
		codeLength += subCodeLength;

		return codeLength;
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("SEQUENCE OF{");

		if (seqOf == null) {
			sb.append("null");
		}
		else {
			Iterator<SubSeq> it = seqOf.iterator();
			if (it.hasNext()) {
				sb.append(it.next());
				while (it.hasNext()) {
					sb.append(", ").append(it.next());
				}
			}
		}

		sb.append("}");

		return sb.toString();
	}

}

